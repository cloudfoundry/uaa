<?xml version="1.0" encoding="UTF-8" ?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:security="http://www.springframework.org/schema/security"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
        xmlns:util="http://www.springframework.org/schema/util"
        xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd
    http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
    http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/security/oauth2 https://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd">

    <authentication-manager alias="authenticationManager" xmlns="http://www.springframework.org/schema/security"/>

    <oauth:resource id="uaa" access-token-uri="${uaa.token.url:http://localhost:8080/uaa/oauth/token}"
                    client-id="login" client-secret="${LOGIN_SECRET:loginsecret}" type="client_credentials"/>

    <bean id="notificationsTemplate" class="org.cloudfoundry.identity.uaa.message.LocalUaaRestTemplate"/>

    <bean id="notificationsUrl" class="java.lang.String">
        <constructor-arg value="${notifications.url:}"/>
    </bean>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <http name="secFilterAutologinAuthorize" request-matcher-ref="autologinAuthorizeRequestMatcher"
          entry-point-ref="loginEntryPoint"
          xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false"/>
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <csrf disabled="false" token-repository-ref="loginCookieCsrfRepository"/>
    </http>

    <http name="secFilterCodeLogin" request-matcher-ref="autologinRequestMatcher" entry-point-ref="loginEntryPoint"
          xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" method="GET"/>
        <custom-filter ref="autologinAuthenticationFilter" position="FORM_LOGIN_FILTER"/>
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
    </http>

    <!-- Pattern:/autologin -->
    <http name="secFilterAutologin" pattern="/autologin" create-session="stateless"
          entry-point-ref="basicAuthenticationEntryPoint"
          xmlns="http://www.springframework.org/schema/security" authentication-manager-ref="emptyAuthenticationManager"
          use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" method="POST"/>
        <anonymous enabled="false"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <bean id="backwardsCompatibleScopeParameter"
          class="org.cloudfoundry.identity.uaa.web.BackwardsCompatibleScopeParsingFilter"/>

    <bean id="acceptInvitationSecurityContextPersistenceFilter"
          class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
        <constructor-arg name="repo">
            <bean id="invitationsContextRepo"
                  class="org.springframework.security.web.context.HttpSessionSecurityContextRepository">
                <property name="trustResolver">
                    <bean id="invitationsTrustResolver"
                          class="org.cloudfoundry.identity.uaa.invitations.InvitationsAuthenticationTrustResolver"/>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <http name="invitationsSecurity"
          entry-point-ref="loginEntryPoint"
          use-expressions="true"
          pattern="/invitations/**"
          xmlns="http://www.springframework.org/schema/security">
        <access-denied-handler ref="loginEntryPoint"/>
        <intercept-url pattern="/invitations/accept" access="isFullyAuthenticated() or isAnonymous()" method="GET"/>
        <intercept-url pattern="/invitations/accept.do" access="hasAuthority('uaa.invited')" method="POST"/>
        <intercept-url pattern="/invitations/accept_enterprise.do" access="hasAuthority('uaa.invited')" method="POST"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <csrf disabled="false"
              token-repository-ref="loginCookieCsrfRepository"/>
        <custom-filter ref="acceptInvitationSecurityContextPersistenceFilter" before="FIRST"/>
    </http>

    <http name="invitationsEndpointSecurity"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true"
          pattern="/invite_users/**"
          create-session="stateless"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                       access="#oauth2.hasAnyScope('scim.invite') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="**" access="denyAll"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" position="PRE_AUTH_FILTER"/>
        <csrf disabled="true"/>
    </http>

    <bean id="resetPasswordEntryPoint"
          class="org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationEntryPoint"/>
    <bean id="resetPasswordAuthenticationFilter"
          class="org.cloudfoundry.identity.uaa.account.ResetPasswordAuthenticationFilter">
        <constructor-arg name="entryPoint" ref="resetPasswordEntryPoint"/>
        <constructor-arg name="handler" ref="accountSavingAuthenticationSuccessHandler"/>
        <constructor-arg name="service" ref="resetPasswordService"/>
        <constructor-arg name="expiringCodeStore" ref="codeStore"/>
    </bean>
    <http name="resetPasswordSubmit"
          pattern="/reset_password.do"
          disable-url-rewriting="true"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <custom-filter ref="userManagementSecurityFilter" before="ANONYMOUS_FILTER"/>
        <custom-filter ref="resetPasswordAuthenticationFilter" position="LAST"/>
        <csrf disabled="false"
              token-repository-ref="loginCookieCsrfRepository"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <http name="forgotPasswordSecurity"
          pattern="/forgot_password**"
          disable-url-rewriting="true"
          entry-point-ref="loginEntryPoint"
          use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <csrf disabled="true"/>
        <access-denied-handler ref="loginEntryPoint"/>
    </http>

    <bean id="uiLogoutRequestMatcher" class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="/logout.do"/>
    </bean>

    <bean id="uiAuthorizeRequestMatcher" class="org.springframework.security.web.util.matcher.AntPathRequestMatcher">
        <constructor-arg value="/oauth/authorize**"/>
    </bean>

    <bean id="samlLogoutHandlers" class="java.util.ArrayList">
        <constructor-arg>
            <util:list>
                <ref bean="uaaAuthenticationFailureHandler"/>
                <ref bean="samlLogoutHandler"/>
            </util:list>
        </constructor-arg>
    </bean>

    <bean id="loginCookieCsrfRepository"
          class="org.cloudfoundry.identity.uaa.security.web.CookieBasedCsrfTokenRepository">
        <property name="secure" value="${require_https:false}"/>
    </bean>

    <bean id="accountSavingAuthenticationSuccessHandler"
          class="org.cloudfoundry.identity.uaa.login.AccountSavingAuthenticationSuccessHandler">
        <constructor-arg name="redirectingHandler" ref="successRedirectHandler"/>
        <constructor-arg name="currentUserCookieFactory" ref="currentUserCookieFactory"/>
    </bean>

    <bean id="currentUserCookieFactory" class="org.cloudfoundry.identity.uaa.login.CurrentUserCookieFactory">
        <constructor-arg name="sessionTimeout" value="${servlet.session-cookie.max-age:1800}"/>
        <constructor-arg name="secure" value="${require_https:false}"/>
    </bean>

    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
        <constructor-arg index="0" ref="logoutHandler"/>
        <constructor-arg index="1">
            <util:list>
                <ref bean="uaaAuthenticationFailureHandler"/>
                <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler"/>
                <bean class="org.springframework.security.web.csrf.CsrfLogoutHandler">
                    <constructor-arg ref="loginCookieCsrfRepository"/>
                </bean>
                <bean class="org.springframework.security.web.authentication.logout.CookieClearingLogoutHandler">
                    <constructor-arg index="0">
                        <util:list>
                            <value>JSESSIONID</value>
                        </util:list>
                    </constructor-arg>
                </bean>
            </util:list>
        </constructor-arg>
        <property name="logoutRequestMatcher" ref="uiLogoutRequestMatcher"/>
    </bean>

    <bean name="clientRedirectStateCache" class="org.cloudfoundry.identity.uaa.web.UaaSavedRequestCache">
        <property name="requestMatcher" ref="uiAuthorizeRequestMatcher"/>
    </bean>

    <bean id="mfaChecker" class="org.cloudfoundry.identity.uaa.mfa.MfaChecker">
    </bean>

    <bean id="mfaUiRequiredFilter" class="org.cloudfoundry.identity.uaa.mfa.MfaUiRequiredFilter">
        <constructor-arg name="urlFilter" value="/login/mfa/**"/>
        <constructor-arg name="redirect" value="/login/mfa/register"/>
        <constructor-arg name="cache" ref="clientRedirectStateCache"/>
        <constructor-arg name="mfaCompleteUrl" ref="mfaCompleteUrl"/>
        <constructor-arg name="checker" ref="mfaChecker"/>
        <constructor-arg name="logoutMatcher" ref="uiLogoutRequestMatcher"/>
    </bean>

    <http name="deleteSavedAccountSecurity" pattern="/delete_saved_account**" create-session="stateless"
          entry-point-ref="basicAuthenticationEntryPoint"
          authentication-manager-ref="clientAuthenticationManager" use-expressions="false"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
    </http>

    <http name="verifyEmailSecurity" pattern="/verify_email" disable-url-rewriting="true"
          xmlns="http://www.springframework.org/schema/security"
          entry-point-ref="loginEntryPoint" use-expressions="false">
        <intercept-url pattern="/verify_email" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <anonymous enabled="true"/>
        <csrf disabled="true"/>
    </http>

    <http name="verifyUserSecurity" pattern="/verify_user" disable-url-rewriting="true"
          xmlns="http://www.springframework.org/schema/security"
          entry-point-ref="loginEntryPoint" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <anonymous enabled="true"/>
        <csrf disabled="true"/>
    </http>

    <http name="acceptInvitationSecurity" pattern="/invitations/accept" disable-url-rewriting="true"
          xmlns="http://www.springframework.org/schema/security"
          entry-point-ref="loginEntryPoint" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <anonymous enabled="true"/>
        <csrf disabled="true"/>
    </http>

    <bean id="catchAllFilterChainProxy" class="org.springframework.security.web.FilterChainProxy">
        <constructor-arg>
            <util:list>
                <security:filter-chain pattern="/**" filters="
                    httpsHeaderFilter,
                    metadataGeneratorFilter,
                    idpMetadataGeneratorFilter,
                    samlFilter"/>
            </util:list>
        </constructor-arg>
    </bean>

    <bean id="passwordChangeUiRequiredFilter" class="org.cloudfoundry.identity.uaa.authentication.PasswordChangeUiRequiredFilter" />

    <bean id="reAuthenticationRequiredFilter"
          class="org.cloudfoundry.identity.uaa.authentication.ReAuthenticationRequiredFilter">
    </bean>

    <http name="idpSecurity"
          use-expressions="true"
          pattern="/saml/idp/SSO/**"
          entry-point-ref="loginEntryPoint"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="isFullyAuthenticated()"/>
        <custom-filter before="BASIC_AUTH_FILTER" ref="idpMetadataGeneratorFilter"/>
        <custom-filter after="FILTER_SECURITY_INTERCEPTOR" ref="samlIdpLoginFilter"/>
        <csrf disabled="true"/>
    </http>

    <http name="uiSecurity"
          use-expressions="true"
          authentication-manager-ref="zoneAwareAuthzAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/force_password_change/**" access="isFullyAuthenticated()"/>
        <intercept-url pattern="/reset_password**" access="isAnonymous()"/>
        <intercept-url pattern="/login/mfa/**" access="isFullyAuthenticated()"/>
        <intercept-url pattern="/create_account*" access="isAnonymous()"/>
        <intercept-url pattern="/login/idp_discovery/**" access="isAnonymous()"/>
        <intercept-url pattern="/login**" access="isAnonymous() or isFullyAuthenticated()"/>
        <intercept-url pattern="/**" access="isFullyAuthenticated()"/>
        <security:custom-filter before="FIRST" ref="metadataGeneratorFilter"/>
        <security:custom-filter after="FIRST" ref="httpsHeaderFilter"/>
        <security:custom-filter before="CHANNEL_FILTER" ref="idpMetadataGeneratorFilter"/>
        <security:custom-filter after="CHANNEL_FILTER" ref="samlFilter"/>
        <security:custom-filter after="SECURITY_CONTEXT_FILTER" ref="reAuthenticationRequiredFilter"/>
        <form-login login-page="/login"
                    username-parameter="username"
                    password-parameter="password"
                    login-processing-url="/login.do"
                    authentication-success-handler-ref="accountSavingAuthenticationSuccessHandler"
                    authentication-failure-handler-ref="uaaAuthenticationFailureHandler"
                    authentication-details-source-ref="authenticationDetailsSource"
                    default-target-url="/"/>
        <custom-filter ref="clientRedirectStateCache" before="CSRF_FILTER"/>
        <custom-filter ref="mfaUiRequiredFilter" after="CSRF_FILTER"/>
        <custom-filter ref="passwordChangeUiRequiredFilter" before="FORM_LOGIN_FILTER"/>
        <custom-filter ref="logoutFilter" after="LOGOUT_FILTER"/>
        <custom-filter ref="samlLogoutFilter" before="LOGOUT_FILTER"/>
        <csrf disabled="false"
              token-repository-ref="loginCookieCsrfRepository"/>
        <access-denied-handler ref="loginEntryPoint"/>
        <request-cache ref="clientRedirectStateCache"/>
    </http>

    <bean id="errorMessageAuthenticationFailureHandler"
          class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
        <property name="exceptionMappings">
            <map>
                <entry key="org.cloudfoundry.identity.uaa.authentication.AccountNotVerifiedException"
                       value="/login?error=account_not_verified"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.PasswordExpiredException"
                       value="/login?error=password_expired"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.AuthenticationPolicyRejectionException"
                       value="/login?error=account_locked"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.AccountNotPreCreatedException"
                       value="/login?error=account_not_precreated"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.PasswordChangeRequiredException"
                       value="/force_password_change"/>
                <entry key="org.cloudfoundry.identity.uaa.authentication.MfaAuthenticationRequiredException"
                       value="/login/mfa/register"/>
            </map>
        </property>
        <property name="defaultFailureUrl" value="/login?error=login_failure"/>
    </bean>

    <bean id="uaaAuthenticationFailureHandler"
          class="org.cloudfoundry.identity.uaa.login.UaaAuthenticationFailureHandler">
        <constructor-arg name="delegate" ref="errorMessageAuthenticationFailureHandler"/>
        <constructor-arg name="currentUserCookieFactory" ref="currentUserCookieFactory"/>
    </bean>


    <bean id="httpsHeaderFilter" class="org.cloudfoundry.identity.uaa.security.web.HttpsHeaderFilter"/>

    <bean id="loginEntryPoint" class="org.cloudfoundry.identity.uaa.security.CsrfAwareEntryPointAndDeniedHandler">
        <constructor-arg name="redirectCsrf" value="/invalid_request"/>
        <constructor-arg name="redirectNotLoggedIn" value="/login?error=invalid_login_request"/>
    </bean>

    <bean id="logoutHandler" class="org.cloudfoundry.identity.uaa.authentication.ZoneAwareWhitelistLogoutHandler">
        <constructor-arg ref="jdbcClientDetailsService"/>
    </bean>

    <!--<mvc:resources location="/" mapping="/**" />-->

    <mvc:default-servlet-handler/>

    <bean id="links" class="java.util.HashMap">
        <constructor-arg value="#{@config['links']==null ? T(java.util.Collections).EMPTY_MAP : @config['links']}"/>
    </bean>

    <!--apply the oauth client context -->
    <oauth:client id="oauth2ClientFilter"/>

    <util:map id="notifications" key-type="org.cloudfoundry.identity.uaa.message.MessageType">
        <entry key="CREATE_ACCOUNT_CONFIRMATION">
            <map>
                <entry key="description" value="Send activation code"/>
                <entry key="id" value="f7a85fdc-d920-41f0-b3a4-55db08e408ce"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
        <entry key="PASSWORD_RESET">
            <map>
                <entry key="description" value="Reset Password"/>
                <entry key="id" value="141200f6-93bd-4761-a721-941ab511ba2c"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
        <entry key="CHANGE_EMAIL">
            <map>
                <entry key="description" value="Change Email"/>
                <entry key="id" value="712de257-a7fa-44cb-b1ac-8a6588d1be23"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
        <entry key="INVITATION">
            <map>
                <entry key="description" value="Invitation"/>
                <entry key="id" value="e6722687-3f0f-4e7a-9925-839a04712cea"/>
                <entry key="critical" value="true" value-type="java.lang.Boolean"/>
            </map>
        </entry>
    </util:map>

    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters>
            <bean class="org.cloudfoundry.identity.uaa.authentication.manager.AutologinRequestConverter"/>
        </mvc:message-converters>
        <mvc:path-matching registered-suffixes-only="true"/>
    </mvc:annotation-driven>

    <bean id="autologinAuthenticationFilter"
          class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
        <constructor-arg ref="autologinAuthenticationManager"/>
        <property name="parameterNames">
            <list>
                <value>code</value>
                <value>response_type</value>
            </list>
        </property>
        <property name="methods">
            <set>
                <value>GET</value>
                <value>POST</value>
            </set>
        </property>
        <property name="successHandler" ref="accountSavingAuthenticationSuccessHandler"/>
    </bean>

    <!-- Pattern: /oauth/authorize parameters:{response_type=code,code=?} -->
    <bean id="autologinAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize"/>
        <property name="parameters">
            <map>
                <entry key="response_type" value="code"/>
                <entry key="code" value=""/>
            </map>
        </property>
    </bean>

    <bean id="autologinRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/autologin"/>
        <property name="parameters">
            <map>
                <entry key="code" value=""/>
            </map>
        </property>
    </bean>

    <!-- Handler deciding where to redirect user after successful login -->
    <bean id="successRedirectHandler"
          class="org.cloudfoundry.identity.uaa.web.UaaSavedRequestAwareAuthenticationSuccessHandler"/>

    <bean id="loginServerConfig" class="org.cloudfoundry.identity.uaa.impl.config.LoginServerConfig"/>

    <mvc:resources mapping="/resources/**" location="/resources/"/>
    <mvc:default-servlet-handler/>

    <bean id="buildInfo" class="org.cloudfoundry.identity.uaa.home.BuildInfo"/>

    <bean id="thymeleafConfig" class="org.cloudfoundry.identity.uaa.login.ThymeleafConfig"/>

    <bean id="emailService" class="org.cloudfoundry.identity.uaa.message.EmailService">
        <constructor-arg index="0"
                         ref="#{T(org.springframework.util.StringUtils).hasText('${smtp.host:}') ? 'smtpJavaMailSender' : 'fakeJavaMailSender'}"/>
        <constructor-arg index="1" value="${login.url:http://localhost:8080/uaa}"/>
        <constructor-arg index="2" value="${smtp.from_address:}"/>
    </bean>

    <bean id="smtpJavaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${smtp.host:localhost}"/>
        <property name="port" value="${smtp.port:25}"/>
        <property name="username" value="${smtp.user:}"/>
        <property name="password" value="${smtp.password:}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">${smtp.auth:false}</prop>
                <prop key="mail.smtp.starttls.enable">${smtp.starttls:false}</prop>
            </props>
        </property>
    </bean>

    <bean id="fakeJavaMailSender" class="org.cloudfoundry.identity.uaa.message.util.FakeJavaMailSender"/>

    <bean id="notificationsService" class="org.cloudfoundry.identity.uaa.message.NotificationsService">
        <constructor-arg ref="notificationsTemplate"/>
        <constructor-arg ref="notificationsUrl"/>
        <constructor-arg ref="notifications"/>
        <constructor-arg value="${notifications.send_in_default_zone:true}"/>
    </bean>

    <bean id="accountCreationService" class="org.cloudfoundry.identity.uaa.account.EmailAccountCreationService">
        <constructor-arg ref="mailTemplateEngine"/>
        <constructor-arg ref="messageService"/>
        <constructor-arg ref="codeStore"/>
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="uaaPasswordValidator"/>
    </bean>

    <bean id="uaaPasswordValidator" class="org.cloudfoundry.identity.uaa.scim.validate.UaaPasswordPolicyValidator">
        <constructor-arg ref="globalPasswordPolicy"/>
    </bean>

    <bean id="changePasswordService" class="org.cloudfoundry.identity.uaa.account.UaaChangePasswordService">
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="uaaPasswordValidator"/>
    </bean>

    <bean id="messagePropertiesSource" class="org.springframework.core.io.support.ResourcePropertySource">
        <constructor-arg value="messages.properties"/>
    </bean>

    <bean id="resetPasswordService" class="org.cloudfoundry.identity.uaa.account.UaaResetPasswordService">
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="codeStore"/>
        <constructor-arg ref="uaaPasswordValidator"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="messagePropertiesSource"/>
    </bean>

    <bean id="changeEmailService" class="org.cloudfoundry.identity.uaa.account.EmailChangeEmailService">
        <constructor-arg ref="mailTemplateEngine"/>
        <constructor-arg ref="messageService"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="scimUserProvisioning"/>
        <constructor-arg ref="codeStore"/>
    </bean>

    <bean id="activeKeyService" class="org.cloudfoundry.identity.uaa.cypto.EncryptionKeyService" />

    <bean id="encryptionService" class="org.cloudfoundry.identity.uaa.cypto.EncryptionService">
        <constructor-arg index="0" value="#{activeKeyService.getActiveKey().getPassphrase()}"/>
    </bean>

    <bean id="jdbcUserGoogleMfaCredentialsProvisioning"
          class="org.cloudfoundry.identity.uaa.mfa.JdbcUserGoogleMfaCredentialsProvisioning">
        <constructor-arg index="0" ref="jdbcTemplate"/>
        <constructor-arg index="1" ref="activeKeyService"/>
    </bean>

    <bean id="userGoogleMfaCredentialsProvisioning"
          class="org.cloudfoundry.identity.uaa.mfa.UserGoogleMfaCredentialsProvisioning">
        <property name="jdbcProvisioner" ref="jdbcUserGoogleMfaCredentialsProvisioning" />
        <property name="mfaProviderProvisioning" ref="mfaProviderProvisioning"/>
        <property name="authenticator" ref="googleAuthenticator"/>
    </bean>

    <bean id="mfaCompleteUrl" class="java.lang.String">
        <constructor-arg value="/login/mfa/completed"/>
    </bean>

    <bean id="googleAuthenticator" class="com.warrenstrange.googleauth.GoogleAuthenticator">
        <constructor-arg name="config" ref="googleAuthenticatorConfig"/>
        <property name="credentialRepository" ref="userGoogleMfaCredentialsProvisioning"/>
    </bean>

    <bean id="googleAuthenticatorConfig" class="com.warrenstrange.googleauth.GoogleAuthenticatorConfig"
          factory-bean="googleAuthenticatorConfigFactory"
          factory-method="build"/>

    <bean id="googleAuthenticatorConfigFactory"
          class="com.warrenstrange.googleauth.GoogleAuthenticatorConfig.GoogleAuthenticatorConfigBuilder"/>

    <bean id="keyInfoService" class="org.cloudfoundry.identity.uaa.oauth.KeyInfoService">
        <constructor-arg name="uaaBaseURL" value="${uaa.url}"/>
    </bean>
</beans>
