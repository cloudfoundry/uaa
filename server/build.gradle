apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

description = "CloudFoundry Identity Server JAR"

dependencies {
    implementation(project(":cloudfoundry-identity-metrics-data"))
    implementation(project(":cloudfoundry-identity-model"))

    implementation(libraries.tomcatJdbc)
    provided(libraries.tomcatEmbed)
    implementation(libraries.javaxMail)

    implementation(libraries.jacksonDatabind)
    implementation(libraries.jsonPath)
    implementation(libraries.zxing)
    implementation(libraries.springBeans)
    implementation(libraries.springContext)
    implementation(libraries.springContextSupport)
    implementation(libraries.springTx)
    implementation(libraries.springJdbc)
    implementation(libraries.springWeb)
    implementation(libraries.springSecurityCore)
    implementation(libraries.springSecurityJwt)
    implementation(libraries.springSecurityWeb)
    implementation(libraries.springSecuritySaml)
    implementation(libraries.springSessionJdbc)

    implementation(libraries.springSecurityOauth) {
        exclude(module: "commons-codec")
        exclude(module: "jackson-mapper-asl")
        exclude(module: "spring-security-web")
    }

    implementation(libraries.bouncyCastleProv)
    implementation(libraries.bouncyCastlePkix)

    implementation(libraries.guava)

    implementation(libraries.aspectJRt)
    implementation(libraries.aspectJWeaver)

    implementation(libraries.thymeleafSpring5)
    implementation(libraries.thymeleafDialect)
    implementation(libraries.thymeleafExtrasSpringSecurity5)

    implementation(libraries.unboundIdScimSdk) {
        exclude(module: "servlet-api")
        exclude(module: "commons-logging")
        exclude(module: "httpclient")
        exclude(module: "wink-client-apache-httpclient")
    }

    implementation(libraries.hibernateValidator)
    implementation(libraries.flywayCore)
    implementation(libraries.mariaJdbcDriver)
    implementation(libraries.hsqldb)

    implementation(libraries.snakeyaml)

    implementation(libraries.springSecurityLdap)
    implementation(libraries.springLdapCore)
    implementation(libraries.springLdapCoreTiger)
    implementation(libraries.apacheLdapApi) {
        exclude(module: "slf4j-api")
    }

    implementation(libraries.passay)

    implementation(libraries.googleAuth)

    implementation(libraries.slf4jImpl)
    implementation(libraries.log4jCore)

    implementation(libraries.javaxXmlBindApi)
    implementation(libraries.javaxXmlBindCore)
    implementation(libraries.javaxXmlBindImpl)

    testImplementation(project(":cloudfoundry-identity-model").sourceSets.test.output)

    testImplementation(libraries.springTest)

    testImplementation(libraries.junit)
    testImplementation(libraries.mockito)

    testImplementation(libraries.mockitoJunit5)

    testImplementation(libraries.postgresql)

    testImplementation(libraries.tomcatElApi)
    testImplementation(libraries.tomcatJasperEl)
    testImplementation(libraries.tomcatJdbc)

    testImplementation(libraries.jsonPathAssert)
}

configurations.all {
    exclude(group: "org.beanshell", module: "bsh-core")
}

jar {
    exclude("org/cloudfoundry/identity/uaa/web/tomcat/UaaStartupFailureListener.*")
}

processResources {
    //maven replaces project.artifactId in the log4j.properties file
    //https://www.pivotaltracker.com/story/show/74344574
    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}', 'cloudfoundry-identity-server') : line }
}

integrationTest {}.onlyIf { //disable since we don't have any
    false
}

task tomcatListenerJar(type: Jar) {
    archiveBaseName = "tomcat-listener"
    from(sourceSets.main.output)
    include("org/cloudfoundry/identity/uaa/web/tomcat/UaaStartupFailureListener.*")
}

artifacts {
    archives(tomcatListenerJar)
}

task migrationJar(type: Jar) {
    manifest {
        attributes('Main-Class': "org.cloudfoundry.identity.uaa.db.FlywayMigrationRunner",
                'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' '))
    }
}

shadowJar {
    archiveBaseName = "UAA-FlywayMigrationRunner"
    manifest {
        inheritFrom(project.tasks.migrationJar.manifest)
    }
    mergeServiceFiles('META-INF/spring.*')
}