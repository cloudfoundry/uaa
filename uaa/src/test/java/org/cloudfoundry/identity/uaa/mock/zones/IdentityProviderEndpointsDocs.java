/*******************************************************************************
 *     Cloud Foundry
 *     Copyright (c) [2009-2015] Pivotal Software, Inc. All Rights Reserved.
 *
 *     This product is licensed to you under the Apache License, Version 2.0 (the "License").
 *     You may not use this product except in compliance with the License.
 *
 *     This product includes a number of subcomponents with
 *     separate copyright notices and license terms. Your use of these
 *     subcomponents is subject to the terms and conditions of the
 *     subcomponent's license, as noted in the LICENSE file.
 *******************************************************************************/
package org.cloudfoundry.identity.uaa.mock.zones;

import org.cloudfoundry.identity.uaa.constants.OriginKeys;
import org.cloudfoundry.identity.uaa.mock.InjectedMockContextTest;
import org.cloudfoundry.identity.uaa.mock.util.MockMvcUtils;
import org.cloudfoundry.identity.uaa.provider.AbstractXOAuthIdentityProviderDefinition;
import org.cloudfoundry.identity.uaa.provider.IdentityProvider;
import org.cloudfoundry.identity.uaa.provider.IdentityProviderProvisioning;
import org.cloudfoundry.identity.uaa.provider.LdapIdentityProviderDefinition;
import org.cloudfoundry.identity.uaa.provider.LockoutPolicy;
import org.cloudfoundry.identity.uaa.provider.RawXOAuthIdentityProviderDefinition;
import org.cloudfoundry.identity.uaa.provider.SamlIdentityProviderDefinition;
import org.cloudfoundry.identity.uaa.provider.UaaIdentityProviderDefinition;
import org.cloudfoundry.identity.uaa.provider.saml.BootstrapSamlIdentityProviderConfiguratorTests;
import org.cloudfoundry.identity.uaa.test.TestClient;
import org.cloudfoundry.identity.uaa.util.JsonUtils;
import org.cloudfoundry.identity.uaa.zone.IdentityZone;
import org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder;
import org.cloudfoundry.identity.uaa.zone.MultitenancyFixture;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.restdocs.payload.FieldDescriptor;
import org.springframework.restdocs.snippet.Snippet;
import org.springframework.test.web.servlet.ResultActions;

import java.net.URL;

import static org.cloudfoundry.identity.uaa.constants.OriginKeys.OAUTH20;
import static org.cloudfoundry.identity.uaa.constants.OriginKeys.SAML;
import static org.springframework.http.MediaType.APPLICATION_JSON;
import static org.springframework.restdocs.headers.HeaderDocumentation.headerWithName;
import static org.springframework.restdocs.headers.HeaderDocumentation.requestHeaders;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.delete;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.get;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.post;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.put;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessRequest;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.preprocessResponse;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.prettyPrint;
import static org.springframework.restdocs.payload.JsonFieldType.ARRAY;
import static org.springframework.restdocs.payload.JsonFieldType.BOOLEAN;
import static org.springframework.restdocs.payload.JsonFieldType.NUMBER;
import static org.springframework.restdocs.payload.JsonFieldType.OBJECT;
import static org.springframework.restdocs.payload.JsonFieldType.STRING;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.restdocs.request.RequestDocumentation.parameterWithName;
import static org.springframework.restdocs.request.RequestDocumentation.pathParameters;
import static org.springframework.restdocs.snippet.Attributes.key;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

public class IdentityProviderEndpointsDocs extends InjectedMockContextTest {
	private static final String NAME_DESC = "Human-readable name for this provider";
	private static final String VERSION_DESC = "";
	private static final String ACTIVE_DESC = "Defaults to true.";
	private static final String ID_DESC = "Unique identifier for this provider - GUID generated by the UAA";
	private static final String IDENTITY_ZONE_ID_DESC = "Set to the zone that this provider will be active in. Determined either by the Host header or the zone switch header.";
	private static final String CREATED_DESC = "UAA sets the creation date";
	private static final String LAST_MODIFIED_DESC = "UAA sets the modification date";
    private static final String CONFIG_DESCRIPTION = "Json config for the Identity Provider";
    private static final FieldDescriptor ATTRIBUTE_MAPPING = fieldWithPath("config.attributeMappings.given_name").type(STRING).attributes(key("constraints").value("Optional")).description("Map `given_name` to the attribute for given name in the provider assertion.").optional();
    private static final FieldDescriptor GIVEN_NAME = fieldWithPath("config.attributeMappings.given_name").type(STRING).attributes(key("constraints").value("Optional")).description("Map `given_name` to the attribute for given name in the provider assertion.").optional();
    private TestClient testClient = null;
    private String adminToken;
    private IdentityProviderProvisioning identityProviderProvisioning;

    private FieldDescriptor FAMILY_NAME = fieldWithPath("config.attributeMappings.family_name").type(STRING).attributes(key("constraints").value("Optional")).description("Map `family_name` to the attribute for family name in the provider assertion.").optional();
    private FieldDescriptor EMAIL = fieldWithPath("config.attributeMappings.email").type(STRING).attributes(key("constraints").value("Optional")).description("Map `email` to the attribute for email in the provider assertion.").optional();
    private FieldDescriptor PHONE_NUMBER = fieldWithPath("config.attributeMappings.phone_number").type(STRING).attributes(key("constraints").value("Optional")).description("Map `phone_number` to the attribute for phone number in the provider assertion.").optional();
    private FieldDescriptor EXTERNAL_GROUPS = fieldWithPath("config.attributeMappings.external_groups").type(OBJECT).attributes(key("constraints").value("Optional")).description("Map `external_groups` to the attribute for groups in the provider assertion.").optional();
    private FieldDescriptor EXTERNAL_GROUPS_WHITELIST = fieldWithPath("config.externalGroupsWhitelist").type(ARRAY).attributes(key("constraints").value("Optional")).description("List of external groups that will be included in the ID Token if the `roles` scope is requested.").optional();
    private FieldDescriptor PROVIDER_DESC = fieldWithPath("config.providerDescription").type(STRING).attributes(key("constraints").value("Optional")).description("Human readable name/description of this provider").optional();
    private FieldDescriptor EMAIL_DOMAIN = fieldWithPath("config.emailDomain").type(ARRAY).attributes(key("constraints").value("Optional")).description("List of email domains associated with the provider for the purpose of associating users to the correct origin upon invitation. If empty list, no invitations are accepted. Wildcards supported.").optional();
    private FieldDescriptor VERSION = fieldWithPath("version").attributes(key("constraints").value("Optional")).description(VERSION_DESC).optional();
    private FieldDescriptor ACTIVE = fieldWithPath("active").attributes(key("constraints").value("Optional")).description(ACTIVE_DESC);
    private FieldDescriptor ID = fieldWithPath("id").type(STRING).attributes(key("constraints").value("Auto")).description(ID_DESC);
    private FieldDescriptor CREATED = fieldWithPath("created").attributes(key("constraints").value("Auto")).description(CREATED_DESC);
    private FieldDescriptor LAST_MODIFIED = fieldWithPath("last_modified").attributes(key("constraints").value("Auto")).description(LAST_MODIFIED_DESC);
    private FieldDescriptor IDENTITY_ZONE_ID = fieldWithPath("identityZoneId").type(STRING).attributes(key("constraints").value("Auto")).description(IDENTITY_ZONE_ID_DESC);
    private FieldDescriptor NAME = fieldWithPath("name").attributes(key("constraints").value("Required")).description(NAME_DESC);
    private FieldDescriptor CONFIG = fieldWithPath("config").attributes(key("constraints").value("Required")).description("Json config for the provider");

    @Before
    public void setUp() throws Exception {
        testClient = new TestClient(getMockMvc());
        adminToken = testClient.getClientCredentialsOAuthAccessToken(
            "admin",
            "adminsecret",
            "");

        identityProviderProvisioning = getWebApplicationContext().getBean(IdentityProviderProvisioning.class);
    }

    @After
    public void clearUaaConfig() throws Exception {
        getWebApplicationContext().getBean(JdbcTemplate.class).update("UPDATE identity_provider SET config=null WHERE origin_key='uaa'");
    }

    @Test
    public void createSAMLIdentityProvider() throws Exception {
        IdentityProvider identityProvider = getSamlProvider("SAML");

        FieldDescriptor[] fieldDescriptors = {
            fieldWithPath("type").attributes(key("constraints").value("Required")).description("`saml`"),
            fieldWithPath("originKey").attributes(key("constraints").value("Required")).description("A unique alias for the SAML provider"),
            NAME,
            PROVIDER_DESC,
            EMAIL_DOMAIN,
            ATTRIBUTE_MAPPING,
            GIVEN_NAME,
            FAMILY_NAME,
            EMAIL,
            PHONE_NUMBER,
            EXTERNAL_GROUPS,
            EXTERNAL_GROUPS_WHITELIST,
            VERSION,
            ACTIVE,
            ID,
            IDENTITY_ZONE_ID,
            CREATED,
            LAST_MODIFIED,
            CONFIG,
            fieldWithPath("config.idpEntityAlias").type(STRING).attributes(key("constraints").value("Auto")).description("This will be set to ``originKey``").optional(),
            fieldWithPath("config.zoneId").type(STRING).attributes(key("constraints").value("Auto")).description("This will be set to the ID of the zone where the provider is being created").optional(),
            fieldWithPath("config.metaDataLocation").type(STRING).attributes(key("constraints").value("Required")).description("SAML Metadata - either an XML string or a URL that will deliver XML content").optional(),
            fieldWithPath("config.nameID").type(STRING).attributes(key("constraints").value("Optional")).description("The name ID to use for the username, default is \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\". Currently the UAA expects the username to be a valid email address").optional(),
            fieldWithPath("config.assertionConsumerIndex").type(NUMBER).attributes(key("constraints").value("Optional")).description("SAML assertion consumer index, default is 0").optional(),
            fieldWithPath("config.metadataTrustCheck").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("Should metadata be validated, defaults to false").optional(),
            fieldWithPath("config.showSamlLink").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("Should the SAML login link be displayed on the login page, defaults to false").optional(),
            fieldWithPath("config.linkText").type(STRING).attributes(key("constraints").value("Required if the ``showSamlLink`` is set to true")).description("The link text for the SAML IDP on the login page").optional(),
            fieldWithPath("config.groupMappingMode").type(STRING).attributes(key("constraints").value("Optional")).description("Either ``EXPLICITLY_MAPPED`` in order to map external groups to OAuth scopes using the group mappings, or ``AS_SCOPES`` to use SAML group names as scopes.").optional(),
            fieldWithPath("config.iconUrl").type(STRING).attributes(key("constraints").value("Optional")).description("Reserved for future use").optional()
        };

        ResultActions resultActions = createIdentityProviderHelper(identityProvider);

        resultActions.andDo(document("{ClassName}/{methodName}",
            preprocessRequest(prettyPrint()),
            preprocessResponse(prettyPrint()),
            requestHeaders(
                headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `uaa.admin` or `idps.write` (only in the same zone that you are a user of)"),
                headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `uaa.admin` scope against the default UAA zone.").optional()
            ),
            requestFields(fieldDescriptors),
            responseFields(fieldDescriptors)
        ));
    }

    @Test
    @Ignore
    public void createOAuthIdentityProvider() throws Exception {
        IdentityProvider identityProvider = new IdentityProvider();
        identityProvider.setType(OAUTH20);
        identityProvider.setName("UAA Provider");
        identityProvider.setOriginKey(OAUTH20);
        AbstractXOAuthIdentityProviderDefinition definition = new RawXOAuthIdentityProviderDefinition();
        definition.setAuthUrl(new URL("http://auth.url"));
        definition.setTokenUrl(new URL("http://token.url"));
        definition.setTokenKey("token-key");
        definition.setRelyingPartyId("uaa");
        definition.setRelyingPartySecret("secret");
        definition.setShowLinkText(false);
        identityProvider.setConfig(definition);

        FieldDescriptor[] fieldDescriptors = {
            fieldWithPath("type").attributes(key("constraints").value("Required")).description(""),
            fieldWithPath("originKey").attributes(key("constraints").value("Required")).description("A unique alias for a OAuth provider"),
            NAME,
            CONFIG,

            fieldWithPath("config.alias").type(STRING).attributes(key("constraints").value("Required")).description("").optional(),
            fieldWithPath("config.authUrl").type(STRING).attributes(key("constraints").value("Required")).description("").optional(),
            fieldWithPath("config.tokenUrl").type(STRING).attributes(key("constraints").value("Required")).description("").optional(),
            fieldWithPath("config.type").type(STRING).attributes(key("constraints").value("Required")).description("").optional(),
            fieldWithPath("config.tokenKeyUrl").type(STRING).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.tokenKey").type(STRING).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.showLinkText").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.linkText").type(STRING).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.relyingPartyId").type(STRING).attributes(key("constraints").value("Required")).description("").optional(),
            fieldWithPath("config.relyingPartySecret").type(STRING).attributes(key("constraints").value("Required")).description("").optional(),
            fieldWithPath("config.skipSslValidation").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.attributeMappings").type(OBJECT).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.externalGroupsWhiteLists").type(ARRAY).attributes(key("constraints").value("Optional")).description("").optional(),
            fieldWithPath("config.providerDescription").type(STRING).attributes(key("constraints").value("Optional")).description("").optional(),

            VERSION,
            ACTIVE,
            ID,
            IDENTITY_ZONE_ID,
            CREATED,
            LAST_MODIFIED
        };

        ResultActions resultActions = createIdentityProviderHelper(identityProvider);
        		
        resultActions.andDo(document("{ClassName}/{methodName}",
            preprocessRequest(prettyPrint()),
            preprocessResponse(prettyPrint()),
            requestHeaders(
                headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `uaa.admin` or `idps.write` (only in the same zone that you are a user of)"),
                headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `uaa.admin` scope against the default UAA zone.").optional()
            ),
            requestFields(fieldDescriptors),
            responseFields(fieldDescriptors)
        ));
    }
    
    @Test
    public void createLDAPIdentityProvider() throws Exception {
        IdentityZone ldapZone = MockMvcUtils.utils().createZoneUsingWebRequest(getMockMvc(), adminToken);
        IdentityProvider identityProvider = MultitenancyFixture.identityProvider("LDAP", ldapZone.getId());
        identityProvider.setType(OriginKeys.LDAP);

        LdapIdentityProviderDefinition providerDefinition = new LdapIdentityProviderDefinition();
        providerDefinition.setLdapProfileFile("ldap/ldap-search-and-bind.xml");
        providerDefinition.setLdapGroupFile("ldap/ldap-groups-map-to-scopes.xml");
        providerDefinition.setBaseUrl("ldap://base.url");
        providerDefinition.setBindUserDn("CN=Administrator,CN=Users,DC=ad");
        providerDefinition.setBindPassword("password");
        providerDefinition.setUserSearchBase("CN=Users,DC=Org,DC=my-domain,DC=com");
        providerDefinition.setUserSearchFilter("(&amp;(anAttribute={0})(objectclass=user))");
        providerDefinition.setGroupSearchBase("OU=Groups,DC=Org,DC=my-domain,DC=com");
        providerDefinition.setGroupSearchFilter("memberOf={0}");
        providerDefinition.setMailAttributeName("mail");
        providerDefinition.setAutoAddGroups(true);
        providerDefinition.setGroupSearchSubTree(true);
        providerDefinition.setMaxGroupSearchDepth(3);
        identityProvider.setConfig(providerDefinition);

        FieldDescriptor[] fieldDescriptors = {
            fieldWithPath("type").attributes(key("constraints").value("Required")).description("`ldap`"),
            fieldWithPath("originKey").attributes(key("constraints").value("Required")).description("Origin key must be `ldap` for an LDAP provider"),
            NAME,
            EMAIL_DOMAIN,
            ATTRIBUTE_MAPPING,
            GIVEN_NAME,
            FAMILY_NAME,
            EMAIL,
            PHONE_NUMBER,
            EXTERNAL_GROUPS,
            EXTERNAL_GROUPS_WHITELIST,
            PROVIDER_DESC,
            VERSION,
            ACTIVE,
            ID,
            CREATED,
            LAST_MODIFIED,
            IDENTITY_ZONE_ID,
            CONFIG,
            fieldWithPath("config.ldapProfileFile").type(STRING).attributes(key("constraints").value("Required")).description("The file to be used for configuring the LDAP authentication. Options are: 'ldap/ldap-simple-bind.xml', 'ldap/ldap-search-and-bind.xml', 'ldap/ldap-search-and-compare.xml'").optional(),
            fieldWithPath("config.ldapGroupFile").type(STRING).attributes(key("constraints").value("Required")).description("The file to be used for group integration. Options are: 'ldap/ldap-no-groups.xml', 'ldap/ldap-groups-as-scopes.xml', 'ldap/ldap-groups-map-to-scopes.xml'").optional(),
            fieldWithPath("config.baseUrl").type(STRING).attributes(key("constraints").value("Required")).description("The URL to the ldap server, must start with ldap:// or ldaps://").optional(),
            fieldWithPath("config.bindUserDn").type(STRING).attributes(key("constraints").value("Required")).description("Used with search-and-bind and search-and-compare. A valid LDAP ID that has read permissions to perform a search of the LDAP tree for user information.").optional(),
            fieldWithPath("config.bindPassword").type(STRING).attributes(key("constraints").value("Required")).description("Used with search-and-bind and search-and-compare. Password for the LDAP ID that performs a search of the LDAP tree for user information.").optional(),
            fieldWithPath("config.userSearchBase").type(STRING).attributes(key("constraints").value("Required")).description("Used with search-and-bind and search-and-compare. Define a base where the search starts at.").optional(),
            fieldWithPath("config.userSearchFilter").type(STRING).attributes(key("constraints").value("Required")).description("Used with search-and-bind and search-and-compare. Search filter used. Takes one parameter, user ID defined as {0}").optional(),
            fieldWithPath("config.groupSearchBase").type(STRING).attributes(key("constraints").value("Required")).description("Search start point for a user group membership search").optional(),
            fieldWithPath("config.groupSearchFilter").type(STRING).attributes(key("constraints").value("Required")).description("Search query filter to find the groups a user belongs to, or for a nested search, groups that a group belongs to").optional(),
            fieldWithPath("config.mailAttributeName").type(STRING).attributes(key("constraints").value("Required")).description("The name of the LDAP attribute that contains the users email address").optional(),
            fieldWithPath("config.autoAddGroups").type(BOOLEAN).attributes(key("constraints").value("Required")).description("Set to true when profile_type=groups_as_scopes to auto create scopes for a user. Ignored for other profiles.").optional(),
            fieldWithPath("config.groupSearchSubTree").type(BOOLEAN).attributes(key("constraints").value("Required")).description("Boolean value, set to true to search below the search base").optional(),
            fieldWithPath("config.groupMaxSearchDepth").type(NUMBER).attributes(key("constraints").value("Required")).description("Set to number of levels a nested group search should go. Set to 1 to disable nested groups (default)").optional(),
            fieldWithPath("config.mailSubstitute").type(STRING).attributes(key("constraints").value("Optional")).description("Defines an email pattern containing a {0} to generate an email address for an LDAP user during authentication").optional(),
            fieldWithPath("config.mailSubstituteOverridesLdap").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("Set to true if you wish to override an LDAP user email address with a generated one").optional(),
            fieldWithPath("config.skipSSLVerification").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("Skips validation of the LDAP cert if set to true.").optional(),
        };

        getMockMvc().perform(post("/identity-providers")
            .header("Authorization", "Bearer " + adminToken)
            .header("X-Identity-Zone-Id", ldapZone.getId())
            .contentType(APPLICATION_JSON)
            .content(JsonUtils.writeValueAsString(identityProvider)))
            .andExpect(status().isCreated()).andDo(document("{ClassName}/{methodName}",
            preprocessRequest(prettyPrint()),
            preprocessResponse(prettyPrint()),
            requestHeaders(
                headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `uaa.admin` or `idps.write` (only in the same zone that you are a user of)"),
                headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `uaa.admin` scope against the default UAA zone.").optional()
            ),
            requestFields(fieldDescriptors),
            responseFields(fieldDescriptors)
        ));
        IdentityZoneHolder.clear();
    }

    @Test
    public void getAllIdentityProviders() throws Exception {
        Snippet responseFields = responseFields(
            fieldWithPath("[].type").description("Type of the identity provider."),
            fieldWithPath("[].originKey").description("Unique identifier for the identity provider."),
            fieldWithPath("[].name").description(NAME_DESC),
            fieldWithPath("[].config").description(CONFIG_DESCRIPTION),

            fieldWithPath("[].version").description(VERSION_DESC),
            fieldWithPath("[].active").description(ACTIVE_DESC),

            fieldWithPath("[].id").description(ID_DESC),
            fieldWithPath("[].identityZoneId").description(IDENTITY_ZONE_ID_DESC),
            fieldWithPath("[].created").description(CREATED_DESC),
            fieldWithPath("[].last_modified").description(LAST_MODIFIED_DESC)
        );

        getMockMvc().perform(get("/identity-providers")
            .header("Authorization", "Bearer " + adminToken)
            .contentType(APPLICATION_JSON))
            .andExpect(status().isOk())
            .andDo(document("{ClassName}/{methodName}",
                preprocessResponse(prettyPrint()),
                requestHeaders(
                    headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `zones.<zone id>.idps.read` or `uaa.admin` or `idps.read` (only in the same zone that you are a user of)"),
                    headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `zones.<zone id>.idps.read` or `uaa.admin` scope against the default UAA zone.").optional()
                ),
                responseFields));
    }

    @Test
    public void getIdentityProvider() throws Exception {
        IdentityProvider identityProvider = JsonUtils.readValue(createIdentityProviderHelper(getSamlProvider("saml-for-get"))
            .andReturn().getResponse().getContentAsString(), IdentityProvider.class);

        getMockMvc().perform(get("/identity-providers/{id}", identityProvider.getId())
            .header("Authorization", "Bearer " + adminToken)
            .contentType(APPLICATION_JSON))
            .andExpect(status().isOk())
            .andDo(document("{ClassName}/{methodName}",
                preprocessResponse(prettyPrint()),
                pathParameters(
                    parameterWithName("id").description(ID_DESC)
                ),
                requestHeaders(
                    headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `zones.<zone id>.idps.read` or `uaa.admin` or `idps.read` (only in the same zone that you are a user of)"),
                    headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `zones.<zone id>.idps.read` or `uaa.admin` scope against the default UAA zone.").optional()
                ),
                responseFields(getCommonFieldDescriptors())));

        deleteIdentityProviderHelper(identityProvider.getId());
    }

    @Test
    public void updateIdentityProvider() throws Exception {
        IdentityProvider identityProvider = identityProviderProvisioning.retrieveByOrigin(OriginKeys.UAA, IdentityZoneHolder.get().getId());

        UaaIdentityProviderDefinition config = new UaaIdentityProviderDefinition();
        config.setLockoutPolicy(new LockoutPolicy(8, 8, 8));
        identityProvider.setConfig(config);

        FieldDescriptor[] fieldDescriptors = {
            fieldWithPath("type").attributes(key("constraints").value("Required")).description("`uaa`"),
            fieldWithPath("originKey").attributes(key("constraints").value("Required")).description("A unique identifier for the IDP. Cannot be updated."),
            NAME,
            VERSION,
            ACTIVE,
            ID,
            IDENTITY_ZONE_ID,
            CREATED,
            LAST_MODIFIED,
            CONFIG,
            fieldWithPath("config.passwordPolicy.minLength").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Minimum number of characters required for password to be considered valid (defaults to 0).").optional(),
            fieldWithPath("config.passwordPolicy.maxLength").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Maximum number of characters required for password to be considered valid (defaults to 255).").optional(),
            fieldWithPath("config.passwordPolicy.requireUpperCaseCharacter").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Minimum number of uppercase characters required for password to be considered valid (defaults to 0).").optional(),
            fieldWithPath("config.passwordPolicy.requireLowerCaseCharacter").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Minimum number of lowercase characters required for password to be considered valid (defaults to 0).").optional(),
            fieldWithPath("config.passwordPolicy.requireDigit").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Minimum number of digits required for password to be considered valid (defaults to 0).").optional(),
            fieldWithPath("config.passwordPolicy.requireSpecialCharacter").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Minimum number of special characters required for password to be considered valid (defaults to 0).").optional(),
            fieldWithPath("config.passwordPolicy.expirePasswordInMonths").type(NUMBER).attributes(key("constraints").value("Required when `passwordPolicy` in the config is not null")).description("Number of months after which current password expires (defaults to 0).").optional(),
            fieldWithPath("config.lockoutPolicy.lockoutPeriodSeconds").type(NUMBER).attributes(key("constraints").value("Required when `LockoutPolicy` in the config is not null")).description("Number of allowed failures before account is locked (defaults to 5).").optional(),
            fieldWithPath("config.lockoutPolicy.lockoutAfterFailures").type(NUMBER).attributes(key("constraints").value("Required when `LockoutPolicy` in the config is not null")).description("Number of seconds in which lockoutAfterFailures failures must occur in order for account to be locked (defaults to 3600).").optional(),
            fieldWithPath("config.lockoutPolicy.countFailuresWithin").type(NUMBER).attributes(key("constraints").value("Required when `LockoutPolicy` in the config is not null")).description("Number of seconds to lock out an account when lockoutAfterFailures failures is exceeded (defaults to 300).").optional(),
            fieldWithPath("config.disableInternalUserManagement").type(BOOLEAN).attributes(key("constraints").value("Optional")).description("When set to true, user management is disabled for this provider, defaults to false").optional(),
            EMAIL_DOMAIN,
            PROVIDER_DESC
        };

        getMockMvc().perform(put("/identity-providers/{id}", identityProvider.getId())
            .header("Authorization", "Bearer " + adminToken)
            .contentType(APPLICATION_JSON)
            .content(JsonUtils.writeValueAsString(identityProvider)))
            .andExpect(status().isOk())
            .andDo(document("{ClassName}/{methodName}",
                preprocessResponse(prettyPrint()),
                pathParameters(
                    parameterWithName("id").description("")
                ),
                requestHeaders(
                    headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `uaa.admin` or `idps.write` (only in the same zone that you are a user of)"),
                    headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `uaa.admin` scope against the default UAA zone.").optional()
                ),
                requestFields(fieldDescriptors),
                responseFields(fieldDescriptors)));
    }

    @Test
    public void deleteIdentityProvider() throws Exception {
        IdentityProvider identityProvider = JsonUtils.readValue(createIdentityProviderHelper(getSamlProvider("saml-for-delete"))
            .andReturn().getResponse().getContentAsString(), IdentityProvider.class);

        ResultActions resultActions = deleteIdentityProviderHelper(identityProvider.getId());

        resultActions
            .andDo(document("{ClassName}/{methodName}",
                preprocessResponse(prettyPrint()),
                pathParameters(
                    parameterWithName("id").description(ID_DESC)
                ),
                requestHeaders(
                    headerWithName("Authorization").description("Bearer token containing `zones.<zone id>.admin` or `uaa.admin` or `idps.write` (only in the same zone that you are a user of)"),
                    headerWithName("X-Identity-Zone-Id").description("May include this header to administer another zone if using `zones.<zone id>.admin` or `uaa.admin` scope against the default UAA zone.").optional()
                ),
                responseFields(getCommonFieldDescriptors())));
    }

    private ResultActions deleteIdentityProviderHelper(String id) throws Exception {
        return getMockMvc().perform(delete("/identity-providers/{id}", id)
            .header("Authorization", "Bearer " + adminToken)
            .contentType(APPLICATION_JSON))
            .andExpect(status().isOk());
    }

    private ResultActions createIdentityProviderHelper(IdentityProvider identityProvider) throws Exception {
    	return getMockMvc().perform(post("/identity-providers")
			.header("Authorization", "Bearer " + adminToken)
			.contentType(APPLICATION_JSON)
			.content(JsonUtils.writeValueAsString(identityProvider)))
    		.andExpect(status().isCreated());
    }

    private FieldDescriptor[] getCommonFieldDescriptors() {
        return new FieldDescriptor[]{
            fieldWithPath("type").attributes(key("constraints").value("Required")).description("Type of the identity provider."),
            fieldWithPath("originKey").attributes(key("constraints").value("Required")).description("Unique identifier for the identity provider."),
            fieldWithPath("config").attributes(key("constraints").value("Required")).description(CONFIG_DESCRIPTION),
            NAME,
            VERSION,
            ACTIVE,
            ID,
            IDENTITY_ZONE_ID,
            CREATED,
            LAST_MODIFIED};
    }

    private IdentityProvider getSamlProvider(String originKey) {
        IdentityProvider<SamlIdentityProviderDefinition> identityProvider = MultitenancyFixture.identityProvider(originKey, IdentityZone.getUaa().getId());
        identityProvider.setType(SAML);

        SamlIdentityProviderDefinition providerDefinition = new SamlIdentityProviderDefinition()
            .setMetaDataLocation(String.format(BootstrapSamlIdentityProviderConfiguratorTests.xmlWithoutID, "http://www.okta.com/" + identityProvider.getOriginKey()))
            .setIdpEntityAlias(identityProvider.getOriginKey())
            .setNameID("urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress")
            .setLinkText("IDPEndpointsMockTests Saml Provider:" + identityProvider.getOriginKey())
            .setZoneId(IdentityZone.getUaa().getId());
        identityProvider.setConfig(providerDefinition);
        return identityProvider;
    }
}
