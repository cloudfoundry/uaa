<?xml version="1.0" encoding="UTF-8" ?>
<!--
    Cloud Foundry
    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.

    This product is licensed to you under the Apache License, Version 2.0 (the "License").
    You may not use this product except in compliance with the License.

    This product includes a number of subcomponents with
    separate copyright notices and license terms. Your use of these
    subcomponents is subject to the terms and conditions of the
    subcomponent's license, as noted in the LICENSE file.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:util="http://www.springframework.org/schema/util"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!--<bean id="tokenEndpoint" class="org.springframework.security.oauth2.provider.endpoint.TokenEndpoint" autowire="byType">-->
        <!--<property name="OAuth2RequestValidator">-->
            <!--<bean class="org.cloudfoundry.identity.uaa.oauth.token.UaaOauth2RequestValidator"/>-->
        <!--</property>-->
        <!--<property name="clientDetailsService" ref="jdbcClientDetailsService"/>-->
    <!--</bean>-->
    <bean id="oauth2RequestValidator" class="org.cloudfoundry.identity.uaa.oauth.token.UaaOauth2RequestValidator"/>

    <bean id="tokenEndpointPostProcessor" class="org.cloudfoundry.identity.uaa.security.web.TokenEndpointPostProcessor"/>

    <oauth:authorization-server client-details-service-ref="jdbcClientDetailsService"
        token-services-ref="tokenServices" user-approval-handler-ref="userManagedApprovalHandler"
        authorization-request-manager-ref="authorizationRequestManager" request-validator-ref="oauth2RequestValidator">
        <oauth:authorization-code authorization-code-services-ref="authorizationCodeServices" />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password authentication-manager-ref="compositeAuthenticationManager" />
    </oauth:authorization-server>

    <!-- Owner password flow for external authentication (SAML) -->
    <!-- Pattern: /oauth/token parameters:{grant_type=password,passcode= -->
    <http name="tokenEndpointSecurityForPasscodes" request-matcher-ref="passcodeTokenMatcher" create-session="stateless" use-expressions="false"
          entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security"  authentication-manager-ref="emptyAuthenticationManager">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <custom-filter ref="passcodeAuthenticationFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <bean id="passcodeAuthenticationFilter" class="org.cloudfoundry.identity.uaa.login.PasscodeAuthenticationFilter">
        <constructor-arg ref="userDatabase" />
        <constructor-arg ref="zoneAwareAuthzAuthenticationManager" />
        <constructor-arg ref="authorizationRequestManager"/>
        <constructor-arg ref="codeStore"/>
        <property name="authenticationDetailsSource" ref="authenticationDetailsSource" />
        <property name="parameterNames">
            <list>
                <value>username</value>
                <value>password</value>
                <value>passcode</value>
                <value>credentials</value>
                <value>origin</value>
                <value>user_id</value>
            </list>
        </property>
    </bean>

    <bean id="passcodeTokenMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/token" />
        <property name="accept">
            <list>
                <value>application/json</value>
                <value>application/x-www-form-urlencoded</value>
            </list>
        </property>
        <property name="parameters">
            <map>
                <entry key="grant_type" value="password" />
                <entry key="passcode" value="" />
            </map>
        </property>
    </bean>

    <bean id="uaaAuthorizationEndpoint" class="org.cloudfoundry.identity.uaa.authorization.UaaAuthorizationEndpoint">
        <property name="authorizationCodeServices" ref="authorizationCodeServices"/>
        <property name="OAuth2RequestValidator" ref="oauth2RequestValidator"/>
        <property name="userApprovalHandler" ref="userManagedApprovalHandler"/>
        <property name="tokenGranter" ref="oauth2TokenGranter"/> <!--this bean created by <oauth:authorization-server/> -->
        <property name="clientDetailsService" ref="jdbcClientDetailsService"/>
        <property name="OAuth2RequestFactory" ref="authorizationRequestManager"/>
        <property name="fallbackToAuthcode" value="${oauth.openid.fallbackToAuthcode:false}"/>
    </bean>

    <!--/oauth/token with any match -->
    <http name="tokenEndpointSecurity" create-session="stateless" authentication-manager-ref="clientAuthenticationManager" use-expressions="false"
        pattern="/oauth/token/**" entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <custom-filter ref="tokenEndpointAuthenticationFilter" after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <!-- Version of the /authorize endpoint for stateless clients such as cf
         /oauth/authorize response_type=token&source=credentials
    -->
    <http name="statelessAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless"
        entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="zoneAwareAuthzAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <bean id="clientAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
        <constructor-arg ref="clientAuthenticationManager" />
        <constructor-arg ref="basicAuthenticationEntryPoint" />
        <property name="authenticationDetailsSource" ref="authenticationDetailsSource" />
    </bean>

    <bean id="compositeAuthenticationManager" class="org.cloudfoundry.identity.uaa.authentication.manager.CompositeAuthenticationManager" />

    <bean id="tokenEndpointAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.BackwardsCompatibleTokenEndpointAuthenticationFilter">
        <constructor-arg ref="zoneAwareAuthzAuthenticationManager" />
        <constructor-arg ref="authorizationRequestManager"/>
        <property name="authenticationDetailsSource" ref="authenticationDetailsSource" />
        <property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
    </bean>

    <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <authentication-provider user-service-ref="clientDetailsUserService">
            <password-encoder ref="cachingPasswordEncoder" />
        </authentication-provider>
    </authentication-manager>

    <bean id="clientAuthenticationPublisher" class="org.cloudfoundry.identity.uaa.oauth.client.ClientAuthenticationPublisher"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="clientAuthenticationPublisher">
            <aop:after-returning method="clientAuthenticationSuccess"
                                 pointcut="execution(* *..ProviderManager+.authenticate(..)) and bean(clientAuthenticationManager)" returning="authentication" />
            <aop:after-throwing method="clientAuthenticationFailure"
                                pointcut="execution(* *..ProviderManager+.authenticate(..)) and args(authentication) and bean(clientAuthenticationManager)"
                                throwing="ex" />
        </aop:aspect>
    </aop:config>



    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="jdbcClientDetailsService" />
        <property name="passwordEncoder" ref="cachingPasswordEncoder" />
    </bean>

    <bean id="oauthAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize" />
        <property name="accept">
            <list>
                <value>application/json</value>
                <value>application/x-www-form-urlencoded</value>
            </list>
        </property>
        <property name="parameters">
            <map>
                <entry key="response_type" value="token" />
                <entry key="source" value="credentials" />
            </map>
        </property>
    </bean>

    <bean id="authzAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
        <constructor-arg ref="zoneAwareAuthzAuthenticationManager" />
        <property name="parameterNames">
            <list>
                <value>username</value>
                <value>password</value>
                <value>passcode</value>
                <value>credentials</value>
            </list>
        </property>
    </bean>

    <!-- For backwards compatibility to the old way of posting credentials to /authorize endpoint
         /oauth/authorize response_type=token&credentials={
    -->
    <http name="oldAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcherOld" create-session="stateless"
        entry-point-ref="oauthAuthenticationEntryPoint" authentication-manager-ref="zoneAwareAuthzAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security" use-expressions="false">
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
        <custom-filter ref="backwardsCompatibleScopeParameter" position="FIRST"/>
        <custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
        <anonymous enabled="false" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <csrf disabled="true"/>
    </http>

    <bean id="oauthAuthorizeRequestMatcherOld" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
        <constructor-arg value="/oauth/authorize" />
        <property name="accept">
            <list>
                <value>application/json</value>
                <value>application/x-www-form-urlencoded</value>
            </list>
        </property>
        <property name="parameters">
            <map>
                <entry key="response_type" value="token" />
                <entry key="credentials" value="{" />
            </map>
        </property>
    </bean>

    <!-- End -->

    <bean id="authorizationCodeServices" class="org.cloudfoundry.identity.uaa.oauth.token.UaaTokenStore">
        <constructor-arg ref="dataSource" />
    </bean>

    <bean id="userApprovalHandler" class="org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandler">
        <!--<property name="tokenServices" ref="tokenServices" />-->
        <!--TODO - set to true once we have persistent tokens -->
        <property name="useTokenServices" value="false"/>
        <property name="requestFactory" ref="authorizationRequestManager"/>
        <property name="tokenServices" ref="tokenServices"/>
        <property name="clientDetailsService" ref="jdbcClientDetailsService" />
    </bean>

    <bean id="userManagedApprovalHandler" class="org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandler">
        <property name="clientDetailsService" ref="clientDetailsService" />
        <property name="approvalStore" ref="approvalStore" />
    </bean>

    <bean id="approvalStore" class="org.cloudfoundry.identity.uaa.oauth.approval.JdbcApprovalStore">
        <constructor-arg name="jdbcTemplate" ref="jdbcTemplate" />
        <constructor-arg name="pagingListFactory" ref="jdbcPagingListFactory" />
        <constructor-arg ref="scimUserQueryConverter"/>
    </bean>

    <bean id="authorizationRequestManager" class="org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManager">
        <constructor-arg ref="jdbcClientDetailsService" />
        <constructor-arg ref="userDatabase"/>
        <constructor-arg ref="identityProviderProvisioning"/>
        <property name="defaultScopes" ref="defaultUserAuthorities" />
    </bean>

    <bean id="signerProvider" class="org.cloudfoundry.identity.uaa.oauth.token.SignerProvider">
        <property name="signingKey" value="${jwt.token.signing-key:tokenkey}" />
        <property name="verifierKey" value="${jwt.token.verification-key:tokenkey}" />
    </bean>

    <bean id="tokenServices" class="org.cloudfoundry.identity.uaa.oauth.token.UaaTokenServices">
        <property name="clientDetailsService" ref="jdbcClientDetailsService" />
        <property name="userDatabase" ref="userDatabase" />
        <property name="signerProvider" ref="signerProvider" />
        <property name="defaultUserAuthorities" ref="defaultUserAuthorities" />
        <property name="issuer" value="${issuer.uri:http://localhost:8080/uaa}" />
        <property name="approvalStore" ref="approvalStore" />
    </bean>

    <oauth:resource-server id="oauthWithoutResourceAuthenticationFilter" token-services-ref="tokenServices"
        entry-point-ref="oauthAuthenticationEntryPoint" />


    <bean id="tokenKeyEndpoint" class="org.cloudfoundry.identity.uaa.oauth.token.TokenKeyEndpoint">
        <property name="signerProvider" ref="signerProvider" />
    </bean>

    <bean id="accessController" class="org.cloudfoundry.identity.uaa.oauth.AccessController">
        <property name="clientDetailsService" ref="jdbcClientDetailsService" />
        <!-- Always use HTTPS if deployed on cloudfoundry -->
        <property name="useSsl"
            value="#{@applicationProperties['oauth.authorize.ssl']?:(T(java.lang.System).getenv('VCAP_APPLICATION')!=null ? true : null)}" />
        <property name="approvalStore" ref="approvalStore" />
    </bean>

    <bean id="defaultUserAuthorities" class="org.springframework.beans.factory.config.SetFactoryBean">
        <property name="sourceSet" value="#{@config['oauth']==null ? legacyDefaultUserAuthorities : @config['oauth']['user']==null ? legacyDefaultUserAuthorities: @config['oauth']['user']['authorities']}"/>
    </bean>

    <util:set id="legacyDefaultUserAuthorities" set-class="java.util.HashSet">
        <value>openid</value>
        <value>scim.me</value>
        <value>cloud_controller.read</value>
        <value>cloud_controller.write</value>
        <value>password.write</value>
        <value>scim.userids</value>
        <value>uaa.user</value>
        <value>approvals.me</value>
        <value>oauth.approvals</value>
        <value>cloud_controller_service_permissions.read</value>
    </util:set>

    <bean id="userDatabase" class="org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabase">
        <constructor-arg ref="jdbcTemplate" />
        <property name="defaultAuthorities" ref="defaultUserAuthorities" />
        <property name="userAuthoritiesQuery">
            <value>select g.displayName from groups g, group_membership m where g.id = m.group_id and m.member_id = ?
            </value>
        </property>
    </bean>

    <bean id="lockoutPolicy" class="org.cloudfoundry.identity.uaa.config.LockoutPolicy">
        <property name="lockoutAfterFailures"
                  value="${authentication.policy.lockoutAfterFailures:#{globalLockoutPolicy.getLockoutAfterFailures()}}"/>
        <property name="countFailuresWithin"
                  value="${authentication.policy.countFailuresWithinSeconds:#{globalLockoutPolicy.getCountFailuresWithin()}}"/>
        <property name="lockoutPeriodSeconds"
                  value="${authentication.policy.lockoutPeriodSeconds:#{globalLockoutPolicy.getLockoutPeriodSeconds()}}"/>
    </bean>

    <bean id="globalLockoutPolicy" class="org.cloudfoundry.identity.uaa.config.LockoutPolicy">
        <property name="lockoutAfterFailures"
                  value="${authentication.policy.global.lockoutAfterFailures:5}"/>
        <property name="countFailuresWithin"
                  value="${authentication.policy.global.countFailuresWithinSeconds:3600}"/>
        <property name="lockoutPeriodSeconds"
                  value="${authentication.policy.global.lockoutPeriodSeconds:300}"/>
    </bean>

    <bean id="defaultUaaLockoutPolicy" class="org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicy">
        <constructor-arg ref="jdbcAuditService"/>
        <constructor-arg ref="identityProviderProvisioning"/>
        <property name="lockoutPolicy" ref="lockoutPolicy" />
    </bean>


    <bean id="globalPeriodLockoutPolicy" class="org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicy">
        <constructor-arg ref="jdbcAuditService"/>
        <constructor-arg ref="identityProviderProvisioning"/>
        <property name="lockoutPolicy" ref="globalLockoutPolicy" />
    </bean>

    <bean id="uaaUserDatabaseAuthenticationManager"
          class="org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManager">
        <constructor-arg ref="userDatabase"/>
        <constructor-arg ref="identityProviderProvisioning"/>
        <property name="accountLoginPolicy" ref="globalPeriodLockoutPolicy"/>
        <property name="origin" value="uaa"/>
        <property name="allowUnverifiedUsers" value="${allowUnverifiedUsers:true}"/>
    </bean>

    <bean id="uaaAuthenticationMgr" class="org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManager">
        <constructor-arg name="delegate" ref="uaaUserDatabaseAuthenticationManager"/>
        <constructor-arg name="origin" value="uaa"/>
        <constructor-arg name="identityProviderProvisioning" ref="identityProviderProvisioning"/>
    </bean>

    <bean id="authzAuthenticationMgr" class="org.cloudfoundry.identity.uaa.authentication.manager.CheckIdpEnabledAuthenticationManager">
        <constructor-arg name="delegate" ref="uaaUserDatabaseAuthenticationManager"/>
        <constructor-arg name="origin" value="uaa"/>
        <constructor-arg name="identityProviderProvisioning" ref="identityProviderProvisioning"/>
    </bean>

    <bean id="zoneAwareAuthzAuthenticationManager" class="org.cloudfoundry.identity.uaa.authentication.manager.DynamicZoneAwareAuthenticationManager"
        destroy-method="destroy">
        <constructor-arg name="authzAuthenticationMgr" ref="authzAuthenticationMgr"/>
        <constructor-arg name="internalUaaAuthenticationManager" ref="uaaAuthenticationMgr"/>
        <constructor-arg name="provisioning" ref="identityProviderProvisioning"/>
        <constructor-arg name="scimGroupExternalMembershipManager" ref="externalGroupMembershipManager"/>
        <constructor-arg name="scimGroupProvisioning" ref="scimGroupProvisioning"/>
        <constructor-arg name="ldapLoginAuthenticationManager" ref="ldapLoginAuthenticationMgr"/>
    </bean>

</beans>
