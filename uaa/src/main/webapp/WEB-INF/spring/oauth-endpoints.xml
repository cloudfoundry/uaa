<?xml version="1.0" encoding="UTF-8" ?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License.
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/security/oauth http://www.springframework.org/schema/security/spring-security-oauth.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userManagedApprovalHandler" authorization-request-manager-ref="authorizationRequestManager">
		<oauth:authorization-code authorization-code-services-ref="authorizationCodeServices" />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password authentication-manager-ref="authzAuthenticationMgr" />
	</oauth:authorization-server>

	<http name="tokenEndpointSecurity" pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
		entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- Version of the /authorize endpoint for stateless clients such as VMC -->
	<http name="statelessAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
		  authentication-manager-ref="authzAuthenticationMgr" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<anonymous enabled="false" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<bean id="clientAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg ref="clientAuthenticationManager" />
		<constructor-arg ref="basicAuthenticationEntryPoint" />
		<property name="authenticationDetailsSource" ref="authenticationDetailsSource" />
	</bean>

	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService">
			<password-encoder ref="bcryptPasswordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
		<property name="passwordEncoder" ref="bcryptPasswordEncoder" />
	</bean>

	<bean id="oauthAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<property name="accept">
			<list>
				<value>application/json</value>
				<value>application/x-www-form-urlencoded</value>
			</list>
		</property>
		<property name="parameters">
			<map>
				<entry key="response_type" value="token" />
				<entry key="source" value="credentials" />
			</map>
		</property>
	</bean>

	<bean id="authzAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
		<constructor-arg ref="authzAuthenticationMgr" />
		<property name="parameterNames">
			<list>
				<value>username</value>
				<value>password</value>
				<value>credentials</value>
			</list>
		</property>
	</bean>

	<!-- For backwards compatibility to the old way of posting credentials to /authorize endpoint -->
	<http name="oldAuthzEndpointSecurity" request-matcher-ref="oauthAuthorizeRequestMatcherOld" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
		  authentication-manager-ref="authzAuthenticationMgr" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<anonymous enabled="false" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<bean id="oauthAuthorizeRequestMatcherOld" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<property name="accept">
			<list>
				<value>application/json</value>
				<value>application/x-www-form-urlencoded</value>
			</list>
		</property>
		<property name="parameters">
			<map>
				<entry key="response_type" value="token" />
				<entry key="credentials" value="{" />
			</map>
		</property>
	</bean>

	<!-- End -->
	
	<bean id="retryInterceptor" class="org.springframework.retry.interceptor.RetryOperationsInterceptor">
		<property name="retryOperations">
			<bean class="org.springframework.retry.support.RetryTemplate">
				<property name="retryPolicy">
					<bean class="org.springframework.retry.policy.ExceptionClassifierRetryPolicy">
						<property name="policyMap">
							<map key-type="java.lang.Class">
								<entry key="org.springframework.dao.TransientDataAccessException">
									<bean class="org.springframework.retry.policy.SimpleRetryPolicy"/>
								</entry>
							</map>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<tx:advice id="tokenAdvice">
		<tx:attributes>
			<tx:method name="createAccessToken" isolation="REPEATABLE_READ" />
			<tx:method name="*" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="tokenServicesExecutions" expression="execution(* org.springframework.security.oauth2.provider.token.AuthorizationServerTokenServices.*(..))" />
		<aop:advisor advice-ref="retryInterceptor" pointcut-ref="tokenServicesExecutions"/>
		<aop:advisor advice-ref="tokenAdvice" pointcut-ref="tokenServicesExecutions"/>
	</aop:config>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
		<constructor-arg ref="dataSource"/>
		<property name="authenticationKeyGenerator">
			<bean class="org.cloudfoundry.identity.uaa.oauth.UaaAuthenticationKeyGenerator">
				<property name="clientDetailsService" ref="clientDetails" />
			</bean>
		</property>
	</bean>

	<bean id="authorizationCodeServices" class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="userApprovalHandler" class="org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="userManagedApprovalHandler" class="org.cloudfoundry.identity.uaa.oauth.UserManagedAuthzApprovalHandler">
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="approvalStore" ref="approvalStore" />
	</bean>
	
	<bean id="approvalStore" class="org.cloudfoundry.identity.uaa.oauth.authz.JdbcApprovalStore">
		<constructor-arg name="jdbcTemplate" ref="jdbcTemplate" />
	</bean>



	<bean id="authorizationRequestManager" class="org.cloudfoundry.identity.uaa.oauth.UaaAuthorizationRequestManager">
		<constructor-arg ref="clientDetails" />
		<property name="defaultScopes" ref="defaultUserAuthorities" />
	</bean>

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="supportRefreshToken" value="true" />
		<property name="tokenStore" ref="tokenStore" />
		<property name="tokenEnhancer" ref="jwtTokenEnhancer" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<context:mbean-server id="mbeanServer" />

	<context:mbean-export server="mbeanServer" default-domain="spring.application" registration="replaceExisting" />

	<bean class="org.springframework.jmx.export.MBeanExporter">
		<property name="server" ref="mbeanServer" />
		<property name="beans">
			<map>
				<entry key="spring.application:type=TokenStore,name=tokenStore" value-ref="tokenStore" />
			</map>
		</property>
		<property name="assembler">
			<bean class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
				<property name="methodMappings">
					<map>
						<entry key="spring.application:type=TokenStore,name=tokenStore" value="getAccessTokenCount,getRefreshTokenCount,getFlushInterval,setFlushInterval" />
					</map>
				</property>
			</bean>
		</property>
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING" />
	</bean>

	<bean id="jwtTokenEnhancer" class="org.cloudfoundry.identity.uaa.oauth.JwtTokenEnhancer">
		<property name="signingKey" value="${jwt.token.signing-key:tokenkey}" />
		<property name="verifierKey" value="${jwt.token.verification-key:tokenkey}" />
	</bean>

	<bean id="accessController" class="org.cloudfoundry.identity.uaa.oauth.AccessController">
		<property name="clientDetailsService" ref="clientDetails" />
		<!-- Always use HTTPS if deployed on cloudfoundry -->
		<property name="useSsl"
			value="#{applicationProperties['oauth.authorize.ssl']?:(T(java.lang.System).getenv('VCAP_APPLICATION')!=null ? true : null)}" />
		<property name="approvalStore" ref="approvalStore" />
	</bean>

	<util:set id="defaultUserAuthorities" set-class="java.util.HashSet">
		<value>openid</value>
		<value>cloud_controller.read</value>
		<value>cloud_controller.write</value>
		<value>password.write</value>
		<value>tokens.write</value>
		<value>tokens.read</value>
		<value>scim.userids</value>
		<value>uaa.user</value>
		<value>approvals.me</value>
	</util:set>

	<bean id="userDatabase" class="org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabase">
		<constructor-arg ref="jdbcTemplate" />
		<property name="defaultAuthorities" ref="defaultUserAuthorities" />
	</bean>

	<bean id="authzAuthenticationMgr" class="org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManager">
		<constructor-arg ref="userDatabase" />
		<property name="accountLoginPolicy">
			<bean class="org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicy">
				<constructor-arg ref="jdbcAuditService" />
				<property name="lockoutAfterFailures" value="5" />
				<property name="lockoutPeriodSeconds" value="300" />
			</bean>
		</property>
	</bean>

</beans>
