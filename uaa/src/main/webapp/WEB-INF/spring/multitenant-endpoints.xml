<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <bean id="identityZoneProvisioning" class="org.cloudfoundry.identity.uaa.zone.JdbcIdentityZoneProvisioning">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>


    <bean id="setUpBouncyCastle" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="java.security.Security"/>
        <property name="targetMethod" value="addProvider"/>
        <property name="arguments">
            <bean class="org.bouncycastle.jce.provider.BouncyCastleProvider"/>
        </property>
    </bean>

    <bean id="identityZoneHolderInitializer" class="org.cloudfoundry.identity.uaa.zone.IdentityZoneHolder.Initializer"
          depends-on="identityZoneConfigurationBootstrap, setUpBouncyCastle" lazy-init="false">
        <constructor-arg ref="identityZoneProvisioning"/>
    </bean>

    <bean id="zoneAwareSamlSpKeyManager" class="org.cloudfoundry.identity.uaa.provider.saml.ZoneAwareKeyManager" depends-on="identityZoneHolderInitializer"/>

    <bean id="identityProviderProvisioning" class="org.cloudfoundry.identity.uaa.provider.JdbcIdentityProviderProvisioning">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>

    <bean id="identityZoneEndpoints" class="org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpoints">
        <constructor-arg ref="identityZoneProvisioning"/>
        <constructor-arg ref="identityProviderProvisioning"/>
        <constructor-arg ref="zoneEndpointsClientRegistrationService"/>
    </bean>

    <bean id="zoneEndpointsClientDetailsValidator"
          class="org.cloudfoundry.identity.uaa.zone.ZoneEndpointsClientDetailsValidator">
        <constructor-arg value="zones.write"/>
    </bean>

    <bean id="zoneEndpointsClientRegistrationService"
          class="org.cloudfoundry.identity.uaa.zone.IdentityZoneEndpointClientRegistrationService">
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="jdbcClientDetailsService"/>
        <constructor-arg ref="zoneEndpointsClientDetailsValidator"/>
        <constructor-arg ref="approvalStore"/>
    </bean>

    <bean id="xOAuthIdentityProviderConfigValidator" class="org.cloudfoundry.identity.uaa.provider.oauth.XOAuthIdentityProviderConfigValidator">
    </bean>

    <bean id="uaaIdentityProviderConfigValidator" class="org.cloudfoundry.identity.uaa.provider.uaa.UaaIdentityProviderConfigValidator">
    </bean>

    <bean id="identityProviderConfigValidator" class="org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegator">
        <property name="delegates">
            <util:map id="delegatesMap" key-type="java.lang.String" value-type="org.cloudfoundry.identity.uaa.provider.IdentityProviderConfigValidationDelegator">
                <entry key="xoauth" value-ref="xOAuthIdentityProviderConfigValidator"/>
                <entry key="uaa" value-ref="uaaIdentityProviderConfigValidator"/>
            </util:map>
        </property>
    </bean>

    <bean id="identityProviderEndpoints" class="org.cloudfoundry.identity.uaa.provider.IdentityProviderEndpoints">
        <constructor-arg ref="identityProviderProvisioning"/>
        <constructor-arg name="scimGroupExternalMembershipManager" ref="externalGroupMembershipManager"/>
        <constructor-arg name="scimGroupProvisioning" ref="scimGroupProvisioning"/>
        <constructor-arg name="configValidator" ref="identityProviderConfigValidator"/>
        <constructor-arg ref="metaDataProviders"/>
    </bean>

    <http name="identityZoneSecurity" pattern="/identity-zones/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/identity-zones"
                       access="#oauth2.hasScopeInAuthZone('zones.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="GET"/>
        <intercept-url pattern="/identity-zones/*"
                       access="#oauth2.hasScopeInAuthZone('zones.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.read')"
                       method="GET"/>
        <intercept-url pattern="/identity-zones/*/clients" access="#oauth2.hasScopeInAuthZone('zones.write')"
                       method="POST"/>
        <intercept-url pattern="/identity-zones/*/clients/*" access="#oauth2.hasScopeInAuthZone('zones.write')"
                       method="DELETE"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScopeInAuthZone('zones.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScopeInAuthZone('zones.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="PUT"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScopeInAuthZone('zones.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="DELETE"/>
        <intercept-url pattern="/**" access="denyAll"/>

        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>


    <bean id="denyAccessToUaaAdvice" class="org.cloudfoundry.identity.uaa.zone.DenyAccessToUaaAdvice"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="denyAccessToUaaAdvice">
            <aop:before method="checkIdentityZone"
                        pointcut="execution(* *..IdentityZoneEndpoints+.updateIdentityZone(..)) and args(identityZone,*)"/>
            <aop:before method="checkIdentityZoneId"
                        pointcut="execution(* *..IdentityZoneEndpoints+.updateIdentityZone(..)) and args(*,identityZoneId)"/>
            <aop:before method="checkIdentityZoneId"
                        pointcut="execution(* *..IdentityZoneEndpoints+.createClient(..)) and args(identityZoneId,*)"/>
            <aop:before method="checkIdentityZoneId"
                        pointcut="execution(* *..IdentityZoneEndpoints+.deleteClient(..)) and args(identityZoneId,*)"/>
        </aop:aspect>
    </aop:config>

    <bean id="identityZoneEventPublisher" class="org.cloudfoundry.identity.uaa.zone.event.IdentityZoneEventPublisher"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="identityZoneEventPublisher">
            <aop:after-returning method="identityZoneCreated"
                                 pointcut="execution(* *..IdentityZoneProvisioning+.create(..)) and bean(identityZoneProvisioning)"
                                 returning="identityZone"/>
            <aop:after-returning method="identityZoneModified"
                                 pointcut="execution(* *..IdentityZoneProvisioning+.update(..)) and bean(identityZoneProvisioning)"
                                 returning="identityZone"/>
        </aop:aspect>
    </aop:config>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="clientAdminEventPublisher">
            <aop:after-returning method="create"
                                 pointcut="execution(* *..IdentityZoneEndpointClientRegistrationService.createClient(..)) and bean(zoneEndpointsClientRegistrationService)"
                                 returning="client"/>
            <aop:around method="delete"
                        pointcut="execution(* *..IdentityZoneEndpointClientRegistrationService.deleteClient(..)) and bean(zoneEndpointsClientRegistrationService) and args(clientId)"/>
        </aop:aspect>
    </aop:config>

    <http name="identityProviderSecurity" pattern="/identity-providers/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="PUT"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="DELETE"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('idps.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="GET"/>
        <intercept-url pattern="/**" access="denyAll"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <bean id="idpEventPublisher" class="org.cloudfoundry.identity.uaa.zone.event.IdentityProviderEventPublisher"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="idpEventPublisher">
            <aop:after-returning method="idpCreated"
                                 pointcut="execution(* *..IdentityProviderProvisioning+.create(..)) and bean(identityProviderProvisioning)"
                                 returning="identityProvider"/>
            <aop:after-returning method="idpModified"
                                 pointcut="execution(* *..IdentityProviderProvisioning+.update(..)) and bean(identityProviderProvisioning)"
                                 returning="identityProvider"/>

        </aop:aspect>
    </aop:config>

    <!-- Begin SAML SP Management -->

    <bean id="serviceProviderProvisioning"
        class="org.cloudfoundry.identity.uaa.provider.saml.idp.JdbcSamlServiceProviderProvisioning">
        <constructor-arg ref="jdbcTemplate"/>
    </bean>

    <bean id="serviceProviderEndpoints"
        class="org.cloudfoundry.identity.uaa.provider.SamlServiceProviderEndpoints">
        <constructor-arg ref="serviceProviderProvisioning"/>
        <constructor-arg ref="spMetaDataProviders"/>
    </bean>

    <http name="serviceProviderSecurity" pattern="/saml/service-providers/**" create-session="stateless"
          entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="POST"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.write') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="PUT"/>
        <intercept-url pattern="/**"
                       access="#oauth2.hasScope('sps.read') or #oauth2.hasScopeInAuthZone('zones.{zone.id}.admin')"
                       method="GET"/>
        <custom-filter ref="resourceAgnosticAuthenticationFilter" before="PRE_AUTH_FILTER"/>
        <expression-handler ref="oauthWebExpressionHandler"/>
        <csrf disabled="true"/>
    </http>

    <bean id="spEventPublisher" class="org.cloudfoundry.identity.uaa.zone.event.ServiceProviderEventPublisher"/>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="spEventPublisher">
            <aop:after-returning method="spCreated"
                                 pointcut="execution(* *..SamlServiceProviderProvisioning+.create(..)) and bean(serviceProviderProvisioning)"
                                 returning="serviceProvider"/>
            <aop:after-returning method="spModified"
                                 pointcut="execution(* *..SamlServiceProviderProvisioning+.update(..)) and bean(serviceProviderProvisioning)"
                                 returning="serviceProvider"/>

        </aop:aspect>
    </aop:config>

    <!-- End SAML SP Management -->

</beans>
