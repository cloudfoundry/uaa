<?xml version="1.0" encoding="UTF-8"?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License.
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

	<bean class="org.cloudfoundry.identity.uaa.config.YamlConfigurationValidator">
		<constructor-arg>
			<bean class="org.cloudfoundry.identity.uaa.UaaConfiguration.UaaConfigConstructor"/>
		</constructor-arg>
		<property name="yaml" value="${environmentYamlKey}"/>
	</bean>

	<bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="propertiesArray">
		<list>
			<ref bean="platformProperties"/>
			<bean class="org.cloudfoundry.identity.uaa.config.EnvironmentPropertiesFactoryBean" />
		</list>
		</property>
	</bean>

	<bean class="org.springframework.jmx.export.MBeanExporter">
		<property name="server" ref="mbeanServer" />
		<property name="registrationBehaviorName" value="REGISTRATION_REPLACE_EXISTING" />
		<property name="beans">
			<map>
				<entry key="spring.application:type=Config,name=uaa" value-ref="&amp;config" />
			</map>
		</property>
		<property name="assembler">
			<bean class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
				<property name="methodMappings">
					<map>
						<entry key="spring.application:type=Config,name=uaa" value="getObject" />
					</map>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="config" class="org.cloudfoundry.identity.uaa.config.EnvironmentMapFactoryBean" />

	<beans profile="default,hsqldb">
		<description>Profile for hsqldb scripts on an empty database</description>
		<util:properties id="platformProperties">
			<prop key="database.driverClassName">org.hsqldb.jdbcDriver</prop>
			<prop key="database.url">jdbc:hsqldb:mem:uaadb</prop>
			<prop key="database.username">sa</prop>
			<prop key="database.password"></prop>
		</util:properties>
		<bean id="platform" class="java.lang.String">
			<constructor-arg value="hsqldb" />
		</bean>
		<bean id="scripts" class="java.lang.String">
			<constructor-arg value="hsqldb" />
		</bean>
        <bean id="validationQuery" class="java.lang.String">
            <constructor-arg value="select 1" />
        </bean>
        <bean id="limitSqlAdapter" class="org.cloudfoundry.identity.uaa.rest.jdbc.DefaultLimitSqlAdapter"/>
	</beans>

	<beans profile="postgresql">
		<description>Profile for postgresql scripts on an existing database</description>
		<util:properties id="platformProperties">
			<prop key="database.driverClassName">org.postgresql.Driver</prop>
			<prop key="database.url">jdbc:postgresql:uaa</prop>
			<prop key="database.username">root</prop>
			<prop key="database.password">changeme</prop>
		</util:properties>
		<bean id="platform" class="java.lang.String">
			<constructor-arg value="postgresql" />
		</bean>
		<bean id="scripts" class="java.lang.String">
			<constructor-arg value="postgresql-cloudfoundry" />
		</bean>
        <bean id="validationQuery" class="java.lang.String">
            <constructor-arg value="select 1" />
        </bean>
		<bean id="limitSqlAdapter" class="org.cloudfoundry.identity.uaa.rest.jdbc.DefaultLimitSqlAdapter"/>
	</beans>

    <beans profile="mysql">
        <description>Profile for mysql scripts on an existing database</description>
        <util:properties id="platformProperties">
            <prop key="database.driverClassName">com.mysql.jdbc.Driver</prop>
            <prop key="database.url">jdbc:mysql://localhost:3306/uaa</prop>
            <prop key="database.username">root</prop>
            <prop key="database.password"></prop>
        </util:properties>
        <bean id="platform" class="java.lang.String">
            <constructor-arg value="mysql" />
        </bean>
        <bean id="scripts" class="java.lang.String">
            <constructor-arg value="mysql-cloudfoundry" />
        </bean>
        <bean id="validationQuery" class="java.lang.String">
            <constructor-arg value="select 1" />
        </bean>
		<bean id="limitSqlAdapter" class="org.cloudfoundry.identity.uaa.rest.jdbc.DefaultLimitSqlAdapter"/>
    </beans>
    
    <beans profile="oracle">
        <description>Profile for Oracle scripts on an existing database</description>
        <util:properties id="platformProperties">
            <prop key="database.driverClassName">oracle.jdbc.OracleDriver</prop>
            <prop key="database.url">jdbc:oracle:thin:@localhost:1521:xe</prop>
            <prop key="database.username">oracle</prop>
            <prop key="database.password">oracle</prop>
        </util:properties>
        <bean id="platform" class="java.lang.String">
            <constructor-arg value="oracle" />
        </bean>
        <bean id="scripts" class="java.lang.String">
            <constructor-arg value="oracle" />
        </bean>
        <bean id="validationQuery" class="java.lang.String">
            <constructor-arg value="select 1 from dual" />
        </bean>
        <bean id="limitSqlAdapter" class="org.cloudfoundry.identity.uaa.rest.jdbc.OracleLimitSqlAdapter"/>
    </beans>

	<beans profile="empty">
		<description>Profile for testing the postgresql scripts on an empty database</description>
		<bean id="scripts" class="java.lang.String">
			<constructor-arg value="postgresql" />
		</bean>
	</beans>

</beans>
