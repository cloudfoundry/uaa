<?xml version="1.0" encoding="UTF-8"?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License.
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<http name="tokenAdminSecurity" pattern="/oauth/(users|clients)/(.*?)/tokens.*" request-matcher="regex" create-session="stateless"
		entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*" access="hasRole('uaa.admin') or (#oauth2.isUser() and #oauth2.hasScope('tokens.write'))"
			method="DELETE" />
		<intercept-url pattern="/oauth/users/.*" access="hasRole('uaa.admin') or (#oauth2.isUser() and #oauth2.hasScope('tokens.read'))"
			method="GET" />
		<intercept-url pattern="/oauth/clients/([^/].*?)/tokens/.*"
			access="hasRole('uaa.admin') or (#oauth2.isClient() and #oauth2.hasScope('tokens.write'))" method="DELETE" />
		<intercept-url pattern="/oauth/clients/.*"
			access="hasRole('uaa.admin') or (#oauth2.isClient() and #oauth2.hasScope('tokens.read'))" method="GET" />
		<custom-filter ref="tokensResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<oauth:resource-server id="tokensResourceAuthenticationFilter" token-services-ref="tokenServices"
		resource-id="tokens" entry-point-ref="oauthAuthenticationEntryPoint" />

	<bean id="tokenAdminEndpoints" class="org.cloudfoundry.identity.uaa.oauth.TokenAdminEndpoints">
		<property name="tokenServices" ref="tokenServices" />
		<property name="scimUserProvisioning" ref="scimUserProvisioning" />
	</bean>

</beans>
