<?xml version="1.0" encoding="UTF-8"?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to 
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License. 
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents 
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">

	<http pattern="/oauth/(users|clients)/(.*?)/tokens.*" request-matcher="regex" create-session="stateless"
		entry-point-ref="oauthAuthenticationEntryPoint" use-expressions="true" authentication-manager-ref="emptyAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
			access="(hasRole('ROLE_USER') or oauthIsClient()) and oauthHasScope('write')"
			method="DELETE" />
		<intercept-url pattern="/oauth/users/.*"
			access="(hasRole('ROLE_USER') or oauthIsClient()) and oauthHasScope('read')"
			method="GET" />
		<intercept-url pattern="/oauth/clients/([^/].*?)/tokens/.*"
			access="oauthClientHasRole('ROLE_CLIENT') and oauthIsClient() and oauthHasScope('write')" method="DELETE" />
		<intercept-url pattern="/oauth/clients/.*" access="oauthClientHasRole('ROLE_CLIENT') and oauthIsClient() and oauthHasScope('read')"
			method="GET" />
		<custom-filter ref="tokensResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<http pattern="/oauth/clients/*/secret" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/clients/*/secret" access="IS_AUTHENTICATED_FULLY,SCOPE_PASSWORD" />
		<custom-filter ref="clientSecretResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/oauth/clients/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
		use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**"
			access="oauthClientHasRole('ROLE_ADMIN') and (hasRole('ROLE_ADMIN') or oauthIsClient()) and oauthHasScope('write')"
			method="DELETE" />
		<intercept-url pattern="/**"
			access="oauthClientHasRole('ROLE_ADMIN') and (hasRole('ROLE_ADMIN') or oauthIsClient()) and oauthHasScope('write')"
			method="POST" />
		<intercept-url pattern="/**"
			access="oauthClientHasRole('ROLE_ADMIN') and (hasRole('ROLE_ADMIN') or oauthIsClient()) and oauthHasScope('write')"
			method="PUT" />
		<intercept-url pattern="/**"
			access="oauthClientHasRole('ROLE_ADMIN') and (hasRole('ROLE_ADMIN') or oauthIsClient()) and oauthHasScope('read')"
			method="GET" />
		<custom-filter ref="clientResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<oauth:resource-server id="clientSecretResourceAuthenticationFilter" token-services-ref="tokenServices"
		entry-point-ref="oauthAuthenticationEntryPoint" />

	<oauth:resource-server id="tokensResourceAuthenticationFilter" token-services-ref="tokenServices"
		resource-id="tokens" entry-point-ref="oauthAuthenticationEntryPoint" />

	<oauth:resource-server id="clientResourceAuthenticationFilter" token-services-ref="tokenServices"
		resource-id="clients" entry-point-ref="oauthAuthenticationEntryPoint" />

	<bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
		<constructor-arg ref="dataSource" />
		<property name="passwordEncoder" ref="bcryptPasswordEncoder" />
	</bean>

	<bean id="clientAdminEndpoints" class="org.cloudfoundry.identity.uaa.oauth.ClientAdminEndpoints">
		<property name="clientRegistrationService" ref="clientDetails" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<!-- This is for the oauth client bootstrap -->
	<bean id="config" class="org.cloudfoundry.identity.uaa.config.YamlMapFactoryBean">
		<property name="resources">
			<list>
				<value>classpath:/uaa.yml</value>
				<value>file:${CLOUD_FOUNDRY_CONFIG_PATH:config}/uaa.yml</value>
				<value>file:${UAA_CONFIG_PATH:config}/uaa.yml</value>
				<value>${UAA_CONFIG_URL:config/uaa.yml}</value>
			</list>
		</property>
		<!-- Default configuration should contain only the admin client to avoid bootstrapping extra clients -->
		<property name="resolutionMethod" value="OVERRIDE_AND_IGNORE" />
	</bean>

	<bean id="clientAdminBootstrap" class="org.cloudfoundry.identity.uaa.oauth.ClientAdminBootstrap">
		<property name="clientRegistrationService" ref="clientDetails" />
		<property name="clients" value="#{@config['oauth']?.clients}" />
		<property name="clientsToOverride" value="admin" />
		<property name="override" value="${oauth.client.override:false}" />
	</bean>

	<beans profile="default">
		<bean class="org.cloudfoundry.identity.uaa.oauth.ClientAdminBootstrap">
			<property name="clientRegistrationService" ref="clientDetails" />
			<property name="clients">
				<map>
					<entry key="vmc">
						<map>
							<entry key="id" value="vmc" />
							<entry key="authorized-grant-types" value="implicit" />
							<entry key="scope" value="read,write,openid,password" />
							<entry key="authorities" value="ROLE_UNTRUSTED" />
							<entry key="resource-ids" value="password,tokens,cloud_controller,openid" />
						</map>
					</entry>
					<entry key="app">
						<map>
							<entry key="id" value="app" />
							<entry key="secret" value="appclientsecret" />
							<entry key="authorized-grant-types" value="password,authorization_code,refresh_token" />
							<entry key="scope" value="read,write,openid" />
							<entry key="authorities" value="ROLE_CLIENT,ROLE_RESOURCE" />
							<entry key="resource-ids" value="password,tokens,cloud_controller,openid,api" />
						</map>
					</entry>
					<entry key="my">
						<map>
							<entry key="id" value="my" />
							<entry key="secret" value="myclientsecret" />
							<entry key="authorized-grant-types" value="implicit" />
							<entry key="scope" value="read,openid" />
							<entry key="authorities" value="ROLE_UNTRUSTED" />
							<entry key="resource-ids" value="cloud_controller,openid,api" />
						</map>
					</entry>
					<entry key="login">
						<map>
							<entry key="id" value="login" />
							<entry key="secret" value="loginsecret" />
							<entry key="authorized-grant-types" value="client_credentials" />
							<entry key="authorities" value="ROLE_CLIENT,ROLE_RESOURCE" />
							<entry key="resource-ids" value="oauth" />
						</map>
					</entry>
				</map>
			</property>
		</bean>
	</beans>

</beans>
