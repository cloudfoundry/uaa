<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<import resource="spring-data-source.xml"/>

	<sec:debug />

	<sec:http pattern="/resources/**" security="none" />
	<sec:http pattern="/favicon.ico" security="none" />
	<sec:http pattern="/index.html" security="none" />
	<sec:http pattern="/login_info" security="none" />

	<http request-matcher-ref="userEndPointRequestMatcher" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="http403" access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/User/*/password" access="SCOPE_PASSWORD" />
		<intercept-url pattern="/Users*" access="SCOPE_READ" method="GET" />
		<intercept-url pattern="/User/**" access="SCOPE_READ" method="GET" />
		<intercept-url pattern="/User/**" access="SCOPE_WRITE" method="DELETE" />
		<intercept-url pattern="/User*" access="SCOPE_WRITE" method="POST" />
		<intercept-url pattern="/User/**" access="SCOPE_WRITE" method="PUT" />
		<intercept-url pattern="/User/**" access="SCOPE_READ" method="GET" />
		<anonymous />
		<custom-filter ref="oauth2ResourceServerFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</http>

	<authentication-manager id="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security" />

	<bean id="userEndPointRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/User" />
	</bean>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<!-- Version of the /authorize endpoint for stateless clients such as VMC -->
	<http request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless" entry-point-ref="http403"
		authentication-manager-ref="userAuthenticationMgr" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
	</http>

	<bean id="oauthAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<constructor-arg value="application/json" />
	</bean>

	<bean id="authzAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
		<constructor-arg ref="userAuthenticationMgr" />
	</bean>

	<bean id="http403" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />

	<http pattern="/check_token" create-session="stateless" entry-point-ref="http403" authentication-manager-ref="clientAuthenticationMgr"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<http-basic />
	</http>

	<http pattern="/userinfo" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="http403" access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="SCOPE_OPENID" />
		<anonymous />
		<custom-filter ref="oauth2ResourceServerFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</http>

	<http access-denied-page="/" authentication-manager-ref="userAuthenticationMgr" access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<!-- machine API access to the authorization process itself is allowed -->
		<intercept-url pattern="/login**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/authorize" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<form-login authentication-failure-url="/login" login-page="/login" login-processing-url="/login.do"
			username-parameter="username" password-parameter="password" />
		<logout logout-success-url="/" logout-url="/logout.do" />
		<custom-filter ref="oauth2ResourceServerFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</http>

	<authentication-manager id="clientAuthenticationMgr" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>

	<authentication-manager id="emptyAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" />

	<bean id="userAuthenticationMgr" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationMgr">
		<constructor-arg ref="userDatabase" />
	</bean>

	<bean id="userDatabase" class="org.cloudfoundry.identity.uaa.user.InMemoryUaaUserDatabase">
		<constructor-arg ref="userData" />
	</bean>

	<bean id="scimUserProvisioning" class="org.cloudfoundry.identity.uaa.scim.InMemoryScimUserProvisioning">
		<constructor-arg ref="userData" />
	</bean>

	<bean id="userData" class="org.cloudfoundry.identity.uaa.config.UaaUserMapFactoryBean">
		<constructor-arg>
			<list value-type="org.cloudfoundry.identity.uaa.user.UaaUser">
				<value>dale|password|olds@vmware.com|Dale|Olds</value>
				<value>joel|password|jdsa@vmware.com|Joel|D'Sa</value>
				<value>dave|password|dsyer@vmware.com|Dave|Syer</value>
				<value>luke|password|ltaylor@vmware.com|Luke|Taylor</value>
				<value>marissa|koala|marissa@test.org|Marissa|Bloggs</value>
			</list>
		</constructor-arg>
	</bean>

	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.RandomValueTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
	</bean>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean id="clientDetailsUserService" class="org.cloudfoundry.identity.uaa.security.ClientDetailsUserService">
		<property name="clientDetails" ref="clientDetails" />
	</bean>

	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password authentication-manager-ref="userAuthenticationMgr" />
	</oauth:authorization-server>

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="app" authorized-grant-types="password,authorization_code,refresh_token" scope="read,openid"
			authorities="ROLE_GUEST" secret="appclientsecret" />
		<oauth:client client-id="my" authorized-grant-types="authorization_code,refresh_token,implicit,client_credentials"
			scope="openid,read,write,password" authorities="ROLE_CLIENT" secret="myclientsecret" />
		<oauth:client client-id="vmc" authorized-grant-types="password,authorization_code,refresh_token,implicit"
			scope="read,write" authorities="ROLE_GUEST" />
	</oauth:client-details-service>

	<oauth:resource-server id="oauth2ResourceServerFilter" token-services-ref="tokenServices"
		resource-id="openid" />

	<mvc:resources location="/resources/" mapping="/resources/**" />

	<mvc:annotation-driven />

	<mvc:default-servlet-handler />

	<!-- Add a handler adapter with special knowledge of the ScimUser endpoints -->
	<bean class="org.cloudfoundry.identity.uaa.config.HandlerAdapterFactoryBean" />

	<bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/jsp/" />
				<property name="suffix" value=".jsp" />
			</bean>
		</property>
		<property name="defaultViews">
			<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
		</property>
	</bean>

	<!--Basic application beans. -->
	<bean id="loginInfoEndpoint" class="org.cloudfoundry.identity.uaa.authentication.LoginInfoEndpoint" />

	<bean id="userInfoEndpoint" class="org.cloudfoundry.identity.uaa.openid.UserInfoEndpoint">
		<property name="userDatabase" ref="userDatabase" />
	</bean>

	<bean id="checkTokenEndpoint" class="org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpoint">
		<property name="tokenStore" ref="tokenStore" />
	</bean>

	<bean id="scimEndpoints" class="org.cloudfoundry.identity.uaa.scim.ScimUserEndpoints">
		<property name="scimUserProvisioning" ref="scimUserProvisioning" />
		<property name="statuses">
			<map key-type="java.lang.Class" value-type="org.springframework.http.HttpStatus">
				<entry key="java.lang.IllegalArgumentException" value="BAD_REQUEST" />
				<entry key="java.lang.UnsupportedOperationException" value="BAD_REQUEST" />
				<entry key="org.cloudfoundry.identity.uaa.scim.InvalidPasswordException" value="BAD_REQUEST" />
				<entry key="org.cloudfoundry.identity.uaa.scim.InvalidUserException" value="BAD_REQUEST" />
				<entry key="org.cloudfoundry.identity.uaa.scim.UserNotFoundException" value="NOT_FOUND" />
				<entry key="org.springframework.jdbc.BadSqlGrammarException" value="BAD_REQUEST" />
			</map>
		</property>
		<property name="messageConverters">
			<bean class="org.cloudfoundry.identity.uaa.error.ExceptionHttpMessageConverter" />
		</property>
	</bean>

	<bean id="accessController" class="org.cloudfoundry.identity.uaa.oauth.AccessController">
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="homeController" class="org.cloudfoundry.identity.uaa.home.HomeController" />

</beans>
