<?xml version="1.0" encoding="UTF-8" ?>
<!-- Cloud Foundry 2012.02.03 Beta Copyright (c) [2009-2012] VMware, Inc. All Rights Reserved. This product is licensed to 
	you under the Apache License, Version 2.0 (the "License"). You may not use this product except in compliance with the License. 
	This product includes a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents 
	is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- The data source has to be defined first -->
	<import resource="spring-data-source.xml" />
	<import resource="spring-scim.xml" />
	<import resource="env-context.xml" />

	<bean class="org.cloudfoundry.identity.uaa.event.listener.AuditListener">
		<constructor-arg ref="loggingAuditService" />
	</bean>

	<!-- Keep this as a top-level bean to ensure it is exposed as a @ManagedResource -->
	<bean id="loggingAuditService" class="org.cloudfoundry.identity.uaa.audit.LoggingAuditService" />

	<sec:http pattern="/resources/**" security="none" />
	<sec:http pattern="/favicon.ico" security="none" />
	<sec:http pattern="/index.html" security="none" />
	<sec:http pattern="/login_info" security="none" />

	<authentication-manager id="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security" />

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>

	<!-- Version of the /authorize endpoint for stateless clients such as VMC -->
	<http request-matcher-ref="oauthAuthorizeRequestMatcher" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
		authentication-manager-ref="authzAuthenticationMgr" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<custom-filter ref="authzAuthenticationFilter" position="FORM_LOGIN_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<bean id="oauthAuthorizeRequestMatcher" class="org.cloudfoundry.identity.uaa.security.web.UaaRequestMatcher">
		<constructor-arg value="/oauth/authorize" />
		<property name="accept" value="application/json" />
		<property name="parameters">
			<map>
				<entry key="response_type" value="token" />
				<entry key="credentials" value="{" />
			</map>
		</property>
	</bean>

	<bean id="authzAuthenticationFilter" class="org.cloudfoundry.identity.uaa.authentication.AuthzAuthenticationFilter">
		<constructor-arg ref="authzAuthenticationMgr" />
	</bean>

	<http pattern="/check_token" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
		authentication-manager-ref="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="ROLE_CLIENT" />
		<anonymous enabled="false" />
		<custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/token_key" create-session="stateless" entry-point-ref="basicAuthenticationEntryPoint"
		authentication-manager-ref="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="ROLE_ADMIN,ROLE_CLIENT" method="POST" />
		<intercept-url pattern="/**" access="ROLE_CLIENT" method="GET" />
		<anonymous enabled="false" />
		<custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/userinfo" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="SCOPE_OPENID" />
		<custom-filter ref="openidResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
		entry-point-ref="basicAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization and error handling 
		separately. This isn't mandatory, but it makes it easier to control the behaviour. -->
	<http pattern="/oauth/(users|clients)/.*" request-matcher="regex" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
		use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
			access="oauthClientHasRole('ROLE_ADMIN') and (hasRole('ROLE_USER') or oauthIsClient()) and oauthHasScope('write')"
			method="DELETE" />
		<intercept-url pattern="/oauth/users/.*"
			access="oauthClientHasRole('ROLE_ADMIN') and (hasRole('ROLE_USER') or oauthIsClient()) and oauthHasScope('read')"
			method="GET" />
		<intercept-url pattern="/oauth/clients/([^/].*?)/tokens/.*"
			access="oauthClientHasRole('ROLE_CLIENT') and oauthIsClient() and oauthHasScope('write')" method="DELETE" />
		<intercept-url pattern="/oauth/clients/.*" access="oauthClientHasRole('ROLE_CLIENT') and oauthIsClient() and oauthHasScope('read')"
			method="GET" />
		<custom-filter ref="tokensResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
		<expression-handler ref="oauthWebExpressionHandler" />
	</http>

	<bean id="clientAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg ref="clientAuthenticationManager" />
		<constructor-arg ref="basicAuthenticationEntryPoint" />
		<property name="authenticationDetailsSource" ref="authenticationDetailsSource" />
	</bean>

	<bean id="basicAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="UAA/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="UAA/oauth" />
	</bean>

	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<!-- We need this even though /varz is in a different servlet because the default security filter applies to all requests -->
	<http pattern="/varz/**" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="oauthAuthenticationEntryPoint" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
	</http>

	<http access-denied-page="/" authentication-manager-ref="authzAuthenticationMgr" xmlns="http://www.springframework.org/schema/security">
		<!-- machine API access to the authorization process itself is allowed -->
		<intercept-url pattern="/login**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/authorize" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<form-login authentication-failure-url="/login?error=true" login-page="/login" login-processing-url="/login.do"
			username-parameter="username" password-parameter="password" authentication-details-source-ref="authenticationDetailsSource" />
		<logout logout-success-url="/" logout-url="/logout.do" />
	</http>

	<bean id="authenticationDetailsSource" class="org.cloudfoundry.identity.uaa.authentication.UaaAuthenticationDetailsSource" />

	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService">
			<password-encoder ref="bcryptPasswordEncoder" />
		</authentication-provider>
	</authentication-manager>

	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<authentication-manager id="emptyAuthenticationMgr" xmlns="http://www.springframework.org/schema/security" />

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
		<property name="passwordEncoder" ref="bcryptPasswordEncoder" />
	</bean>

	<bean id="userApprovalHandler" class="org.cloudfoundry.identity.uaa.oauth.UaaUserApprovalHandler">
		<property name="tokenServices" ref="tokenServices" />
		<property name="autoApproveClients">
			<set>
				<value>vmc</value>
			</set>
		</property>
	</bean>

	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password authentication-manager-ref="authzAuthenticationMgr" />
	</oauth:authorization-server>

	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="app" authorized-grant-types="password,authorization_code,refresh_token" scope="read,openid"
			authorities="ROLE_CLIENT" secret="${app.client.secret:$2a$10$7uLdSof7NIMYAUlbrV8wzuEZ45cc17kZjH.kC7vcJgHBD0SnE7JSe}" />
		<oauth:client client-id="my" authorized-grant-types="authorization_code,refresh_token,implicit,client_credentials"
			scope="openid,read" authorities="ROLE_CLIENT" secret="${my.client.secret:$2a$10$8qjw5C.p65W6VIV7vXC0Hemo0S5kvt1ib/n4zBObx9XxLHo7FqUGS}" />
		<oauth:client client-id="scim" authorized-grant-types="client_credentials" scope="read,write,password"
			authorities="ROLE_CLIENT,ROLE_ADMIN" secret="${scim.client.secret:$2a$10$mEaFQ2.VeetFRVXAUZGzl.x62KjnwVTHPjbVJ/ErsRJyhndXawxv.}"
			resource-ids="scim,password,tokens" />
		<oauth:client client-id="token" authorized-grant-types="password,authorization_code" scope="read,write"
			authorities="ROLE_CLIENT,ROLE_ADMIN" secret="${token.client.secret:$2a$10$mEaFQ2.VeetFRVXAUZGzl.x62KjnwVTHPjbVJ/ErsRJyhndXawxv.}"
			resource-ids="tokens" />
		<oauth:client client-id="vmc" authorized-grant-types="implicit" scope="read,password" authorities="ROLE_UNTRUSTED"
			resource-ids="cloud_controller,openid,password" />
		<oauth:client client-id="cloud_controller" authorized-grant-types="client_credentials" scope="read,openid"
			authorities="ROLE_CLIENT" secret="${cloud_controller.client.secret:$2a$08$qsrUOJQo0CWRuI9l4St6Eugt0fXf2bPKeGXN8J3glRHHhEMajUUk2}" />
	</oauth:client-details-service>

	<oauth:web-expression-handler id="oauthWebExpressionHandler" />

	<oauth:resource-server id="openidResourceAuthenticationFilter" token-services-ref="tokenServices"
		resource-id="openid" />

	<oauth:resource-server id="tokensResourceAuthenticationFilter" token-services-ref="tokenServices"
		resource-id="tokens" />

	<mvc:resources location="/resources/" mapping="/resources/**" />

	<mvc:annotation-driven />

	<mvc:default-servlet-handler />

	<bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="mediaTypes">
			<map>
				<entry key="html" value="text/html" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="viewResolvers">
			<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
				<property name="prefix" value="/WEB-INF/jsp/" />
				<property name="suffix" value=".jsp" />
			</bean>
		</property>
		<property name="defaultViews">
			<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />
		</property>
	</bean>

	<context:mbean-server id="mbeanServer" />

	<context:mbean-export server="mbeanServer" default-domain="spring.application" />

	<bean class="org.springframework.jmx.export.MBeanExporter">
		<property name="server" ref="mbeanServer" />
		<property name="beans">
			<map>
				<entry key="spring.application:type=TokenStore,name=tokenStore" value-ref="tokenStore" />
			</map>
		</property>
		<property name="assembler">
			<bean class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
				<property name="methodMappings">
					<map>
						<entry key="spring.application:type=TokenStore,name=tokenStore" value="getAccessTokenCount,getRefreshTokenCount,getFlushInterval,setFlushInterval" />
					</map>
				</property>
			</bean>
		</property>
	</bean>

	<!--Basic application beans. -->
	<bean id="loginInfoEndpoint" class="org.cloudfoundry.identity.uaa.authentication.login.LoginInfoEndpoint" />

	<bean id="userInfoEndpoint" class="org.cloudfoundry.identity.uaa.openid.UserInfoEndpoint">
		<property name="userDatabase" ref="userDatabase" />
	</bean>

	<bean id="checkTokenEndpoint" class="org.cloudfoundry.identity.uaa.oauth.CheckTokenEndpoint">
		<property name="tokenServices" ref="tokenServices" />
	</bean>

	<bean id="tokenAdminEndpoints" class="org.cloudfoundry.identity.uaa.oauth.TokenAdminEndpoints">
		<property name="tokenServices" ref="tokenServices" />
	</bean>

	<bean id="accessController" class="org.cloudfoundry.identity.uaa.oauth.AccessController">
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<bean id="homeController" class="org.cloudfoundry.identity.uaa.home.HomeController" />

	<bean id="userDatabase" class="org.cloudfoundry.identity.uaa.user.JdbcUaaUserDatabase">
		<constructor-arg ref="jdbcTemplate" />
	</bean>

	<bean class="org.cloudfoundry.identity.uaa.event.listener.AuditListener">
		<constructor-arg ref="jdbcAuditService" />
	</bean>

	<bean id="jdbcAuditService" class="org.cloudfoundry.identity.uaa.audit.JdbcAuditService">
		<constructor-arg ref="dataSource" />
	</bean>

	<beans profile="default,!legacy">

		<bean id="authzAuthenticationMgr" class="org.cloudfoundry.identity.uaa.authentication.manager.AuthzAuthenticationManager">
			<constructor-arg ref="userDatabase" />
			<property name="accountLoginPolicy">
				<bean class="org.cloudfoundry.identity.uaa.authentication.manager.PeriodLockoutPolicy">
					<constructor-arg ref="jdbcAuditService" />
					<property name="lockoutAfterFailures" value="5" />
					<property name="lockoutPeriodSeconds" value="300" />
				</bean>
			</property>
		</bean>

		<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.RandomValueTokenServices">
			<property name="tokenStore" ref="tokenStore" />
			<property name="supportRefreshToken" value="true" />
		</bean>

	</beans>

	<beans profile="legacy">

		<bean id="userDatabase" class="org.cloudfoundry.identity.uaa.user.LegacyUaaUserDatabase" />

		<bean id="authzAuthenticationMgr" class="org.cloudfoundry.identity.uaa.authentication.manager.LegacyAuthenticationManager">
			<property name="cloudControllerUrl" value="${cloud_controller.login_url:http://api.cloudfoundry.com/users/{username}/tokens}" />
		</bean>

		<bean id="tokenServices" class="org.cloudfoundry.identity.uaa.oauth.JwtTokenServices">
			<property name="tokenStore" ref="tokenStore" />
			<property name="key" value="${jwt.token.key:tokenkey}" />
		</bean>

	</beans>

</beans>
