# Access confirmation messages
tokens.read=Inspect your approvals like this one you have granted to this and other applications
tokens.write=Cancel the approvals like this one that you have granted to this and other applications
cloud_controller.read=Browse and inspect your apps and services on Cloud Foundry
cloud_controller.write=Push apps to your account and create and bind services on Cloud Foundry
openid=Access your profile data including email address

# Batch job documentation:
userDataMigrationJob.description=Initial data migration from Cloud Controller to UAA.  By default copies all user accounts.  Job parameters: \
<ul><li>min.id - id in the CCDB to start from (default 0)</li>\
<li>users - comma-separated list of emails for updating the authority flag (default empty)</li>\
<li>authority - ROLE_ADMIN or ROLE_USER (default ROLE_ADMIN)</li></ul>
userDataBackwardsJob.description=Data migration from UAA to Cloud Controller for user accounts that only exist in the UAA (e.g. if \
they were created through SCIM endpoints or if the Cloud Controller created them but failed to create the same users in its own database. \
Job parameters: start.date - earliest date to start the input query bu created date
updateAdminUsersJob.description=Update the authority flag for a list of users.  Job parameters: \
<ul><li>users - comma-separated list of emails for updating the authority flag (default empty)</li>\
<li>authority - ROLE_ADMIN or ROLE_USER (default ROLE_ADMIN)</li></ul>
userDataSyncJob.description=Synchronize the passwords of users that were somehow updated in the CC and not in the UAA. Skips users that were updated more recently in the UAA, \
or where the passwords are identical. Job parameters: \
<ul><li>start.date - the date to start scanning in the CCDB</li></ul>
cloudControllerSqlJob.description=Execute some SQL on the CCDB and for a select show the result in the job execution context. Job Parameter: "sql". 
uaaSqlJob.description=Execute some SQL on the UAADB and for a select show the result in the job execution context. Job Parameter: "sql". 
testJob.description=No-op job for testing purposes.  Should be launchable and never fail.