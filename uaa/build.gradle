Project identityServer = parent.subprojects.find { it.name.equals("cloudfoundry-identity-server") }

apply(plugin: "war")

processResources {
    //maven replaces project.artifactId in the log4j.properties file
    //https://www.pivotaltracker.com/story/show/74344574
    from(new File('../common/src/main/resources/log4j.properties'))
    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}', 'cloudfoundry-identity-uaa') : line }
}

apply(plugin: "eclipse-wtp")
apply(plugin: "org.springframework.boot")

eclipse {
    wtp {
        component {
            contextPath = "uaa"
        }
    }
}

repositories {
    maven { url("https://repo.spring.io/libs-milestone") }
}

description = "UAA"
dependencies {
    implementation(project(":cloudfoundry-identity-server")) {
        exclude(module: "jna")
    }
    implementation(libraries.springBootStarter)
    implementation(libraries.springBootStarterWeb)
    implementation(libraries.springSecurityOauth) {
        exclude(module: "commons-codec")
        exclude(module: "jackson-mapper-asl")
        exclude(module: "spring-security-web")
    }
    runtimeOnly(libraries.springSecurityConfig)
    runtimeOnly(libraries.springRetry)
    runtimeOnly(libraries.aspectJWeaver)
    runtimeOnly(libraries.postgresql)

    implementation(libraries.javaxXmlBindApi)
    implementation(libraries.glassfishJaxb)

    providedCompile(libraries.tomcatEmbed)

    testImplementation(identityServer.sourceSets.test.output)

    testImplementation(project(":cloudfoundry-identity-model"))
    testImplementation(project(":cloudfoundry-identity-metrics-data"))
    testImplementation(libraries.apacheDsProtocolLdap) {
        exclude(module: "bcprov-jdk18")
        exclude(module: "slf4j-api")
        exclude(module: "slf4j-log4j12")
    }
    testImplementation(libraries.apacheLdapApi) {
        exclude(module: "slf4j-api")
    }
    testImplementation(libraries.flywayCore)
    testImplementation(libraries.googleAuth)
    testImplementation(libraries.hibernateValidator)
    testImplementation(libraries.junit)
    testImplementation(libraries.selenium)
    testImplementation(libraries.seleniumHttp)
    testImplementation(libraries.dumbster)
    testImplementation(libraries.zxing)
    testImplementation(libraries.jsonAssert)
    testImplementation(libraries.jsonPathAssert)
    testImplementation(libraries.unboundIdScimSdk) {
        exclude(module: "servlet-api")
        exclude(module: "commons-logging")
        exclude(module: "httpclient")
        exclude(module: "wink-client-apache-httpclient")
    }
    testImplementation(libraries.springBootStarterLog4j2)
    testImplementation(libraries.springContextSupport)
    testImplementation(libraries.springSessionJdbc)
    testImplementation(libraries.springTest)
    testImplementation(libraries.springSecurityJwt)
    testImplementation(libraries.springSecurityLdap)
    testImplementation(libraries.springSecuritySaml) {
        exclude(module: "xalan") // exclude vulnerable xalan 2.7.2 (see: CVE-2022-34169)
    }
    testImplementation(libraries.springSecurityTest)
    testImplementation(libraries.mockito)
    testImplementation(libraries.tomcatJdbc)
    testImplementation(libraries.springRestdocs)
    testImplementation(libraries.javaxMail)
    testImplementation(libraries.snakeyaml)
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
    exclude("org/cloudfoundry/identity/uaa/integration/*.class")
    exclude("**/*IT.class")
    exclude("**/*Docs.class")
    systemProperty("mock.suite.test", "true")
}

integrationTest {
    filter {
        includeTestsMatching("org.cloudfoundry.identity.uaa.integration.*")
        includeTestsMatching("*IT")
    }
}

war {
    //workaround for maven <scope>optional</scope>
    rootSpec.exclude("**/spring-security-oauth-*.jar")
}
