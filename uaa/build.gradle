Project identityServer = parent.subprojects.find { it.name.equals("cloudfoundry-identity-server") }

apply(plugin: "war")

processResources {
    //maven replaces project.artifactId in the log4j.properties file
    //https://www.pivotaltracker.com/story/show/74344574
    from(new File('../common/src/main/resources/log4j.properties'))
    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}', 'cloudfoundry-identity-uaa') : line }
}

apply(plugin: "org.springframework.boot")
bootWar { enabled = false }
jar { enabled = false }
war { archiveClassifier = '' }
war { enabled = true }


repositories {
    maven { url("https://repo.spring.io/libs-milestone") }
}

description = "UAA"
dependencies {
    implementation(project(":cloudfoundry-identity-server")) {
        exclude(module: "jna")
    }
    implementation(project(":cloudfoundry-identity-statsd-lib"))
    implementation(project(":cloudfoundry-identity-model"))
    implementation(libraries.springSecurityConfig)
    implementation(libraries.springSecurityWeb)
    implementation(libraries.springBootStarter)
    implementation(libraries.springBootStarterWeb)
    implementation(libraries.thymeLeaf) {
        exclude(module: "ognl")
    }
    implementation(libraries.thymeleafSpring5) {
        exclude(module: "ognl")
    }
    runtimeOnly(libraries.springSecurityConfig)
    runtimeOnly(libraries.springRetry)
    runtimeOnly(libraries.aspectJWeaver)
    runtimeOnly(libraries.postgresql)

    implementation(libraries.javaxXmlBindApi)
    implementation(libraries.glassfishJaxb)

    implementation(libraries.braveInstrumentationSpringWebmvc)
    implementation(libraries.braveContextSlf4j)

    providedCompile(libraries.tomcatEmbed)

    testImplementation(identityServer.sourceSets.test.output)

    testImplementation(project(":cloudfoundry-identity-model"))
    testImplementation(project(":cloudfoundry-identity-metrics-data"))
    testImplementation(libraries.apacheDsProtocolLdap) {
        exclude(module: "bcprov-jdk15")
        exclude(module: "slf4j-api")
        exclude(module: "slf4j-log4j12")
    }
    testImplementation(libraries.apacheLdapApi) {
        exclude(module: "slf4j-api")
    }
    testImplementation(libraries.flywayCore)
    testImplementation(libraries.hibernateValidator)
    testImplementation(libraries.junit)
    testImplementation(libraries.selenium)
    testImplementation(libraries.seleniumHttp)
    testImplementation(libraries.dumbster) {
        exclude(module: "mail")
        exclude(module: "activation")
    }
    testImplementation(libraries.jsonAssert)
    testImplementation(libraries.jsonPathAssert)
    testImplementation(libraries.unboundIdScimSdk) {
        exclude(module: "servlet-api")
        exclude(module: "commons-logging")
        exclude(module: "httpclient")
        exclude(module: "wink-client-apache-httpclient")
    }
    testImplementation(libraries.springBootStarterLog4j2)
    testImplementation(libraries.springContextSupport)
    testImplementation(libraries.springSessionJdbc)
    testImplementation(libraries.springTest)
    testImplementation(libraries.springSecurityLdap)
    testImplementation(libraries.springSecurityTest)
    testImplementation(libraries.springBootStarterMail)
    testImplementation(libraries.mockito)
    testImplementation(libraries.tomcatJdbc)
    testImplementation(libraries.springRestdocs)
    testImplementation(libraries.greenmail)
    testImplementation(libraries.jodaTime)
    testImplementation(libraries.commonsIo)
    testImplementation(libraries.owaspEsapi)
    testImplementation(libraries.apacheHttpClient)
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
    exclude("org/cloudfoundry/identity/uaa/integration/*.class")
    exclude("**/*IT.class")
    exclude("**/*Docs.class")
    systemProperty("mock.suite.test", "true")
}

task populateVersionfile {
    def versionFile = new File("$projectDir/slateCustomizations/source/versionfile")
    versionFile.createNewFile()
    assert versionFile.exists()
    versionFile.text = version.toString().substring(0, version.toString().lastIndexOf(".")) + ".0"
}
task customizeSlate(type: Copy) {
    dependsOn populateVersionfile
    from("slate")
    from("slateCustomizations")
    into("build/slate")
}
task docsTestRestDocs(type: Test) {
    useJUnitPlatform()
    include("**/*Docs.class")
    systemProperty("docs.build.generated.snippets.dir", snippetsDir.getPath())
}

task(gemInstallBundle, type: Exec) {
    dependsOn("customizeSlate")
    workingDir(file("build/slate"))
    executable("gem")
    args("install", "bundler:2.2.22")
}

task(bundleInstall, type: Exec) {
    dependsOn gemInstallBundle
    dependsOn("customizeSlate")
    workingDir(file("build/slate"))
    executable("bundle")
    args("install")
}

task(deleteDefaultContent, type: Delete) {
    delete("build/slate/source/index.html.md")
}

task(slate, type: Exec) {
    dependsOn("customizeSlate", "deleteDefaultContent", "bundleInstall", "docsTestRestDocs")
    workingDir(file("build/slate"))
    executable("bundle")
    args("exec", "middleman", "build", "--verbose", "--build-dir=../docs/version/" + version.toString().substring(0, version.toString().lastIndexOf(".")) + ".0")
}

generateDocs {
    dependsOn(slate)
}

integrationTest {
    filter {
        includeTestsMatching("org.cloudfoundry.identity.uaa.integration.*")
        includeTestsMatching("*IT")
    }
}

war {
    //workaround for maven <scope>optional</scope>
    rootSpec.exclude("**/spring-security-oauth-*.jar")
}
