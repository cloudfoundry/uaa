Project identityServer = parent.subprojects.find { it.name.equals("cloudfoundry-identity-server") }

apply plugin: "war"
apply plugin: "org.asciidoctor.convert"
apply plugin: "com.moowork.node"

processResources {
    //maven replaces project.artifactId in the log4j.properties file
    //https://www.pivotaltracker.com/story/show/74344574
    from(new File('../common/src/main/resources/log4j.properties'))
    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}', 'cloudfoundry-identity-uaa') : line }
}

apply plugin: "eclipse-wtp"
apply plugin: "org.springframework.boot"

eclipse {
    wtp {
        component {
            contextPath = "uaa"
        }
    }
}

repositories {
    maven { url "https://repo.spring.io/libs-milestone" }
}

description = "UAA"
dependencies {
    compile(project(":cloudfoundry-identity-server")) {
        exclude(module: "jna")
    }
    compile libraries.springBootStarter
    compile libraries.springBootStarterWeb
    runtime libraries.springSecurityConfig
    runtime libraries.springRetry
    runtime libraries.aspectJWeaver
    runtime libraries.postgresql

    implementation libraries.javaxXmlBindApi
    implementation libraries.javaxXmlBindCore
    implementation libraries.javaxXmlBindImpl

    providedCompile libraries.tomcatEmbed

    testCompile identityServer.configurations.testCompile.dependencies
    testCompile identityServer.sourceSets.test.output

    testCompile(libraries.apacheDsProtocolLdap) {
        exclude(module: "bcprov-jdk15")
        exclude(module: "slf4j-api")
        exclude(module: "slf4j-log4j12")
    }
    testCompile libraries.junit
    testCompile libraries.selenium
    testCompile libraries.dumbster
    testCompile libraries.zxing
    testCompile libraries.jsonAssert
    testCompile libraries.springTest
    testCompile libraries.springSecurityTest
    testCompile libraries.mockito
    testCompile libraries.tomcatJdbc
    testCompile libraries.springRestdocs
}

node {
    version = "8.16.0"
    npmVersion = "6.4.1"

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for NPM
    npmWorkDir = file("${project.buildDir}/npm")

    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}")
}
task jasmineTests {
    dependsOn(npm_install)
    dependsOn(npm_test)
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
    exclude "org/cloudfoundry/identity/uaa/integration/*.class"
    exclude "**/*IT.class"
    exclude "**/*Docs.class"
    systemProperty "mock.suite.test", "true"
}

task populateVersionfile {
    def versionfile = new File("$projectDir/slateCustomizations/source/versionfile")
    versionfile.createNewFile()
    assert versionfile.exists()
    versionfile.text = version.toString().substring(0, version.toString().lastIndexOf(".")) + ".0"
}
task customizeSlate(type: Copy) {
    dependsOn populateVersionfile
    from "slate"
    from "slateCustomizations"
    into "build/slate"
}
task docsTestRestDocs(type: Test) {
    useJUnitPlatform()
    include "**/*Docs.class"
    systemProperty "docs.build.generated.snippets.dir", snippetsDir.getPath()
}

task(bundleInstall, type: Exec) {
    dependsOn "customizeSlate"
    workingDir file("build/slate")
    executable "bundle"
    args "install"
}

task(deleteDefaultContent, type: Delete) {
    delete "build/slate/source/index.html.md"
}


task(slate, type: Exec) {
    dependsOn "customizeSlate", "deleteDefaultContent", "bundleInstall", "docsTestRestDocs"
    workingDir file("build/slate")
    executable "bundle"
    args "exec", "middleman", "build", "--verbose", "--build-dir=../docs/version/" + version.toString().substring(0, version.toString().lastIndexOf(".")) + ".0"
}
generateDocs {
    dependsOn slate
}

integrationTest {
    filter {
        includeTestsMatching "org.cloudfoundry.identity.uaa.integration.*"
        includeTestsMatching "*IT"
    }
}

war {
    //workaround for maven <scope>optional</scope>
    rootSpec.exclude("**/spring-security-oauth-*.jar")
}

//task (copyResources, type: Copy) {
//    into 'build/resources/main'
//    from 'src/main/webapp/resources'
//    from 'src/main/webapp/WEB-INF'
//
//    into ('vendor') {
//        from 'src/main/webapp/vendor'
//    }
//}
//
//bootRun {
//    dependsOn copyResources
//}
//
//bootJar {
//    dependsOn copyResources
//}
//
//bootWar {
//    dependsOn copyResources
//}
