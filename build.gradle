import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files
import java.nio.file.Paths

import io.honeycomb.libhoney.HoneyClient
import io.honeycomb.libhoney.EventFactory
import static io.honeycomb.libhoney.LibHoney.create
import static io.honeycomb.libhoney.LibHoney.options

buildscript {
    apply from: file('shared_versions.gradle')

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'https://repo.spring.io/plugins-release'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath group: 'io.honeycomb.libhoney', name: 'libhoney-java', version: '1.0.2'
        classpath group: 'com.bmuschko', name: 'gradle-cargo-plugin', version: '2.6'
        classpath group: 'org.kt3k.gradle.plugin', name: 'coveralls-gradle-plugin', version: '2.4.0'
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath group: 'com.moowork.gradle', name: 'gradle-node-plugin', version: '1.1.0'
    }
}

apply from: file('shared_versions.gradle')
apply plugin: 'com.bmuschko.cargo'

allprojects {
    apply plugin: 'maven'
    group = 'org.cloudfoundry.identity'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    configurations.provided.transitive = false

    repositories {
        mavenCentral()
        maven {
            url 'https://build.shibboleth.net/nexus/content/repositories/releases/'
        }
        maven { url 'https://repository.mulesoft.org/releases/' }
    }
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }
    apply plugin: 'maven-publish'

    publishing {
        repositories {
            maven {
                url "https://oss.sonatype.org/content/repositories/releases"
                credentials {
                    username "$nexusUsername"
                    password "$nexusPassword"
                }
            }
        }
    }
}

subprojects {
    EventFactory honeyCombEventFactory = buildEventFactory()

    apply plugin: 'java'

    dependencies {
        testCompile("com.github.sbrannen:spring-test-junit5:1.2.0")
        testCompile("org.junit.jupiter:junit-jupiter-api:${junit5JupiterVersion}")
        testCompile("org.junit.jupiter:junit-jupiter-params:${junit5JupiterVersion}")
        testCompile group: "org.hamcrest", name: "hamcrest-all", version: parent.hamcrestVersion
        testCompile group: 'io.honeycomb.libhoney', name: 'libhoney-java', version: '1.0.2'
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junit5JupiterVersion}")
        testRuntime("org.junit.vintage:junit-vintage-engine:${junit5JupiterVersion}")
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none', '-nowarn']
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    test {
        maxParallelForks = 6

        useJUnitPlatform()
        jvmArgs += ["-Xmx1024m", "-XX:+StartAttachListener", "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/var/log/uaa-tests.hprof"]

        afterSuite { descriptor, testResult ->
            sendTestData(honeyCombEventFactory, descriptor, testResult, "after_suite")
        }

        afterTest { descriptor, testResult ->
            sendTestData(honeyCombEventFactory, descriptor, testResult, "after_test")
        }

        testLogging {
            events 'skipped', 'failed', 'passed'
            exceptionFormat 'full'

            // Uncomment the following line to see all standard output from tests (there's a ton of it!)
            //showStandardStreams = true
        }
    }

    task integrationTest(type: Test) {
        dependsOn rootProject.cargoStartLocal

        afterSuite { descriptor, testResult ->
            sendTestData(honeyCombEventFactory, descriptor, testResult, "after_integration_suite")
        }

        afterTest { descriptor, testResult ->
            sendTestData(honeyCombEventFactory, descriptor, testResult, "after_integration_test")
        }
    }

    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task generateDocs() {
    }

    artifacts {
        archives packageSources
    }

    repositories {
        maven { url 'https://jitpack.io' }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.maven.apache.org/maven2" }
    }

}

cargo {
    containerId = 'tomcat9x'
    port = 8080

    deployable {
        file = file('statsd/build/libs/cloudfoundry-identity-statsd-' + version + '.war')
        context = 'statsd'
    }

    deployable {
        file = file('samples/api/build/libs/cloudfoundry-identity-api-' + version + '.war')
        context = 'api'
    }

    deployable {
        file = file('samples/app/build/libs/cloudfoundry-identity-app-' + version + '.war')
        context = 'app'
    }

    deployable {
        file = file('uaa/build/libs/cloudfoundry-identity-uaa-' + version + '.war')
        context = 'uaa'
    }

    local {
        startStopTimeout = 540000
        List activeProfiles = System.getProperty('spring.profiles.active', '').split(',')
        if (activeProfiles.contains('debug')) {
            jvmArgs = "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -DLOGIN_CONFIG_URL=file://" + new File(".").absolutePath + "/uaa/src/main/resources/required_configuration.yml"
        } else {
            jvmArgs = "-DLOGIN_CONFIG_URL=file://" + new File(".").absolutePath + "/uaa/src/main/resources/required_configuration.yml"
        }
        outputFile = file('uaa/build/reports/tests/uaa-server.log')
        configFile {
            files = files('scripts/cargo/tomcat-conf/context.xml')
            toDir = 'conf'
        }

        systemProperties {
            property 'spring.profiles.active', System.getProperty('spring.profiles.active', 'default')
            property 'metrics.perRequestMetrics', System.getProperty('metrics.perRequestMetrics', 'true')
            property 'smtp.host', 'localhost'
            property 'smtp.port', 2525
        }

        installer {
            installUrl = 'https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/' + tomcatVersion + '/tomcat-' + tomcatVersion + '.tar.gz'
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }
    }
}

project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    project.allprojects.collect({ it.tasks.withType(Test) }).flatten().each {
        it.systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active', 'default')
        it.systemProperty 'testId', System.getProperty('testId', '')
    }
}

//task declarations
task run(dependsOn: cargoRunLocal)

task manifests(dependsOn: assemble, type: Copy) {
    from('uaa/src/test/resources/sample-manifests') {
        include '**/*.yml'
        filter(ReplaceTokens,
                tokens: [
                        version  : version,
                        app      : System.getProperty('app', 'myuaa'),
                        appdomain: System.getProperty('app-domain', 'bosh-lite.com'),
                ]
        )
    }
    into 'build/sample-manifests'
}

task cleanCargoConfDir {
    delete file(System.getProperty('java.io.tmpdir') + '/cargo/conf')
    try {
        Files.createDirectory(Paths.get(System.getProperty('java.io.tmpdir') + '/cargo'))
    } catch (all) {
    }
}

task integrationTest(dependsOn: subprojects.integrationTest) {
    finalizedBy cargoStopLocal
}

task mockAssertion(type: JavaExec) {
    main = 'org.cloudfoundry.identity.uaa.saml.MockSamlAssertion'
    args = System.getProperty("file", null) == null ? [] : [System.getProperty("file")]
    classpath = files(subprojects.sourceSets.test.runtimeClasspath)
}

task encrypt(type: JavaExec) {
    main = 'org.cloudfoundry.identity.uaa.Encryptor'
    args = System.getProperty("encryptArgs", null) == null ? [] : System.getProperty("encryptArgs").split(",").toList()
    classpath = files(subprojects.find { it.name.contains('server') }.sourceSets.test.runtimeClasspath)
}

task decrypt(type: JavaExec) {
    main = 'org.cloudfoundry.identity.uaa.Decryptor'
    args = System.getProperty("decryptArgs", null) == null ? [] : System.getProperty("decryptArgs").split(",").toList()
    classpath = files(subprojects.find { it.name.contains('server') }.sourceSets.test.runtimeClasspath)
}

// task dependencies
assemble.dependsOn subprojects.assemble
test.dependsOn subprojects.test
test.mustRunAfter integrationTest
cargoStartLocal.dependsOn assemble
cargoRunLocal.dependsOn cleanCargoConfDir, assemble

private EventFactory buildEventFactory() {
    def honeycombKey = System.getenv("HONEYCOMB_KEY")
    def honeycombDataset = System.getenv("HONEYCOMB_DATASET")

    if (!honeycombKey?.trim() || !honeycombDataset?.trim()) {
        return null
    }

    HoneyClient honeyClient = create(
            options()
                    .setWriteKey(honeycombKey)
                    .setDataset(honeycombDataset)
                    .build()
    )

    def uniqueTestID = UUID.randomUUID().toString()
    System.setProperty("testId", uniqueTestID)

    return honeyClient.buildEventFactory()
            .addField("testId", uniqueTestID)
            .addField("cpuCores", Runtime.getRuntime().availableProcessors())
            .addField("hostname", InetAddress.getLocalHost().getHostName())
            .build()
}

private sendTestData(localBuilder, descriptor, testResult, testLifecycle) {
    if (localBuilder != null) {
        def event = localBuilder.createEvent()

        event
                .addField("test_lifecycle", testLifecycle)
                .addField("testClass", descriptor.className)
                .addField("testName", descriptor.name)
                .addField("result", testResult.resultType)
                .addField("output", testResult.exception)
                .addField("startTime", testResult.startTime)
                .addField("endTime", testResult.endTime)
                .addField("duration", testResult.endTime - testResult.startTime)
                .setTimestamp(System.currentTimeMillis())

        for (Map.Entry entry : System.getProperties().entrySet()) {
            event.addField(entry.key, entry.value)
        }

        event.addField("DB", System.getenv().get("DB"))
        event.addField("SPRING_PROFILE", System.getenv().get("SPRING_PROFILE"))
        event.addField("JAVA_HOME", System.getenv().get("JAVA_HOME"))

        event.send()
    }
}
