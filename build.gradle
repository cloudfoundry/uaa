import org.apache.tools.ant.filters.ReplaceTokens

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    apply from: "dependencies.gradle"

    repositories {
        mavenCentral()
        maven {
            url "https://repo.spring.io/plugins-release"
        }
    }

    dependencies {
        classpath libraries.gradleCargoPlugin
        classpath libraries.prodepsPlugin
        classpath libraries.asciidoctorGradlePlugin
        classpath libraries.gradleNodePlugin
        classpath libraries.springDependencyMgmtPlugin
        classpath libraries.springBootGradlePlugin
    }
}

apply from: "dependencies.gradle"
apply plugin: "com.bmuschko.cargo"

allprojects {

    apply plugin: "propdeps"
    apply plugin: "propdeps-maven"
    apply plugin: "propdeps-idea"
    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom libraries.springBom
            mavenBom libraries.springBootBom
        }
    }

    configurations.provided.transitive = false

    repositories {
        mavenCentral()
        maven {
            url "https://build.shibboleth.net/nexus/content/repositories/releases/"
        }
        maven { url "https://repository.mulesoft.org/releases/" }
    }
}

subprojects {
    apply plugin: "java"

    configurations.all {
        exclude group: "org.hamcrest", module: "hamcrest-all"
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        exclude group: "org.apache.directory.server", module: "apacheds-core"
        exclude group: "org.apache.directory.server", module: "apacheds-protocol-ldap"
        exclude group: "org.skyscreamer", module: "jsonassert"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }

    dependencies {
        testCompile(libraries.springBootStarterTest)
        testCompile libraries.hamcrest
        testCompile(libraries.junit5JupiterApi)
        testCompile(libraries.junit5JupiterParams)
        testRuntime(libraries.junit5JupiterEngine)
        testRuntime(libraries.junitVintageEngine)
        testCompile libraries.unboundIdLdapSdk

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
    }

    [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:none", "-nowarn"]

    sourceCompatibility = 1.11
    targetCompatibility = 1.11

    test {
        maxParallelForks = 6

        useJUnitPlatform()
        jvmArgs += ["-Xmx1024m", "-XX:+StartAttachListener", "-XX:+HeapDumpOnOutOfMemoryError", "-XX:HeapDumpPath=/var/log/uaa-tests.hprof"]

        testLogging {
            events "skipped", "failed", "passed"
            exceptionFormat "full"

            // Uncomment the following line to see all standard output from tests (there's a ton of it!)
            //showStandardStreams = true
        }
    }

    task integrationTest(type: Test) {
        dependsOn rootProject.cargoStartLocal

        useJUnitPlatform()

        testLogging {
            events "skipped", "failed", "passed"
            exceptionFormat "full"

            // Uncomment the following line to see all standard output from tests (there's a ton of it!)
            //showStandardStreams = true
        }
    }

    task generateDocs() {
    }

    task writeNewPom() {
        doLast {
            pom {
                project {
                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution "repo"
                        }
                    }
                }
            }.writeTo("./pom.xml")
        }
    }

    repositories {
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url "https://repo.spring.io/release"
        }
        maven {
            url "https://repo.maven.apache.org/maven2"
        }
    }

}

cargo {
    containerId = "tomcat9x"
    port = 8080

    deployable {
        file = file("statsd/build/libs/cloudfoundry-identity-statsd-" + version + ".war")
        context = "statsd"
    }

    deployable {
        file = file("samples/api/build/libs/cloudfoundry-identity-api-" + version + ".war")
        context = "api"
    }

    deployable {
        file = file("samples/app/build/libs/cloudfoundry-identity-app-" + version + ".war")
        context = "app"
    }

    deployable {
        file = file("uaa/build/libs/cloudfoundry-identity-uaa-" + version + ".war")
        context = "uaa"
    }

    local {
        startStopTimeout = 540000
        List activeProfiles = System.getProperty("spring.profiles.active", "").split(",")
        jvmArgs = "-DLOGIN_CONFIG_URL=classpath:required_configuration.yml"
        if (activeProfiles.contains("debug")) {
            jvmArgs = String.format("%s -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005", jvmArgs)
        }

        outputFile = file("uaa/build/reports/tests/uaa-server.log")
        configFile {
            files = files("scripts/cargo/tomcat-conf/context.xml")
            toDir = "conf"
        }

        systemProperties {
            property "spring.profiles.active", System.getProperty("spring.profiles.active", "default")
            property "metrics.perRequestMetrics", System.getProperty("metrics.perRequestMetrics", "true")
            property "smtp.host", "localhost"
            property "smtp.port", 2525
        }

        installer {
            installUrl = "https://repo1.maven.org/maven2/org/apache/tomcat/tomcat/" + tomcatVersion + "/tomcat-" + tomcatVersion + ".tar.gz"
            downloadDir = file("$buildDir/download")
            extractDir = file("$buildDir/extract")
        }
    }
}

project.gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    project.allprojects.collect({ it.tasks.withType(Test) }).flatten().each {
        it.systemProperty "spring.profiles.active", System.getProperty("spring.profiles.active", "default")
        it.systemProperty "testId", System.getProperty("testId", "")
    }
}

//task declarations
task run(dependsOn: cargoRunLocal)

task manifests(dependsOn: assemble, type: Copy) {
    from("uaa/src/test/resources/sample-manifests") {
        include "**/*.yml"
        filter(ReplaceTokens,
                tokens: [
                        version  : version,
                        app      : System.getProperty("app", "myuaa"),
                        appdomain: System.getProperty("app-domain", "bosh-lite.com"),
                ]
        )
    }
    into "build/sample-manifests"
}

task cleanCargoConfDir {
    delete file(System.getProperty("java.io.tmpdir") + "/cargo/conf")
    try {
        Files.createDirectory(Paths.get(System.getProperty("java.io.tmpdir") + "/cargo"))
    } catch (all) {
    }
}

task integrationTest(dependsOn: subprojects.integrationTest) {
    finalizedBy cargoStopLocal
}


// task dependencies
assemble.dependsOn subprojects.assemble
test.dependsOn subprojects.test
test.mustRunAfter integrationTest
cargoStartLocal.dependsOn assemble
cargoRunLocal.dependsOn cleanCargoConfDir, assemble
